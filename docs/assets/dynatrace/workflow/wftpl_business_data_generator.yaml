metadata:
  version: "1"
  dependencies:
    apps:
      - id: dynatrace.automations
        version: ^1.2020.0
  inputs: []
workflow:
  title: Business Data Generator - Workshop
  tasks:
    config:
      name: config
      description: Build a custom task running js Code
      action: dynatrace.automations:run-javascript
      input:
        script: >
          import { execution } from "@dynatrace-sdk/automation-utils"


          export default async function ({ execution_id }) {
            // NB - CURRENTLY ALL PIECES OF CONFIG ARE MANDATORY

            // If using the defaults that the generator comes with, set the below to true so that a default dashboard
            // is imported which shows several examples of visualisations.
            const EXAMPLE_DASHBOARD = true

            // A name that describes this business process - this will be used as the name for the Business Flow that
            // gets created, and also the dashboard if you choose to have it.
            const FLOW_NAME = "[RETAIL] eCommerce order delivery"

            // Name of the event.provider field that will be used. Events in the future will be stored in a provider
            // with ".temp" appended to the end.
            const EVENT_PROVIDER = "acme.retail"

            // Name of the correlation ID that will be added to each BizEvent, this will be the name
            // of the field that you see in the BizEvent.
            const CORRELATION_ID = "order.id"

            // Steps you wish the process to have, the first field is the "pretty name", the
            // second is what the "event.type" in the BizEvent will be, and the numbers after it are:
            // First number: "Drop off" percentage. e.g. 5 = 5% of users will drop off.
            // Second number: Minimum time (in hours) for the step to take.
            // Third number: Maximum time (in hours) for the step to take.
            // N.B - So far only tested with processes taking up to 48 hours.
            // Boolean: Will this step "loop" and be repeated several times before the process continues?
            // Number: Max number of times this step should loop.
            // Note: Step 1 doesn't use any of the numbers and the last step cannot loop.
            const PROCESS_STEPS = [
              ["Place order", "place.order"],
              ["Received in warehouse", "warehouse.received", 5, 0.1, 0.2, false, 1],
              ["Item picked", "item.picked", 1, 0.1, 0.2, true, 3],
              ["Order packed", "order.packed", 1, 1, 2, false, 1],
              ["Order shipped", "order.shipped", 5, 0.5, 1, false, 1],
              ["Delivery re-attempted", "delivery.reattempted", 5, 0.5, 1, false, 1],
              ["Order received", "order.received", 1, 0.1, 0.2],
            ]

            // Which of the steps would you like to be optional?
            // First number: The "0 indexed" step number (for example step 6 is step 5).
            // Second number: Percentage of flows that will do this step. e.g. 40 = 40% of users will do it.
            // NB - So far only tested on steps that are NOT the first or last.
            const OPTIONAL_STEP = [5, 40]

            // Locations you wish to be attached to the users, the number after it
            // is the percentage that will have that location - they must add up to 100.
            const LOCATIONS_WITH_PERCENTAGE = [
              ["London", 25],
              ["Manchester", 20],
              ["Birmingham", 12],
              ["Newcastle", 10],
              ["Glasgow", 8],
              ["Portsmouth", 7],
              ["Reading", 6],
              ["Leicester", 5],
              ["Liverpool", 4],
              ["Leeds", 3],
            ]

            // Which steps would you like to have location data attached to?
            // This is also "0 indexed" - so step 0 is the first step.
            const LOCATIONS = [0, 1]

            // Add in a custom user segment, and which steps you would like to contain the data.
            // String: Name of the field to be added to the Biz Event.
            // Array: List of steps you would like to have the segment data attached to.
            const SEGMENT = ["loyalty", [0, 2]]

            // Different values to be used for your segment. A list of values with the
            // number representing what percentage of users will have it. They must all add
            // up to 100.
            const SEGMENTS = [
              ["gold", 60],
              ["silver", 20],
              ["bronze", 10],
              ["basic", 10],
            ]

            // Add in a revenue field used to attach the monetary value to a Biz Event.
            // String: Name of the field to be added to the Biz Event.
            // Array: List of steps you would like to have the revenue data attached to.
            // First number: Minimum value.
            // Second number: Maximum value.
            // String: The "pretty name" of the revenue field.
            const REVENUE = ["order.value", [0], 100, 2000, "Revenue"]

            // Hosts from your environment that you can randomly attribute to Biz Events, you need to
            // use the Dynatrace identifier and make sure the percentages add up to 100.
            const HOST_ENTITY = [
              ["HOST-218FBE0DE60A5B16", 50],
              ["HOST-DA9370FA4A602E97", 50],
            ]

            // Different errors that you want to attach to a certain step:
            // - First field is the name of the error which will be appeneded to the step name.
            // - Second field is the (zero indexed) step this error will happen on.
            // - Third field is the percentage of time this error will happen. (which is only used in newly generated data)
            // For this first batch of data, anything in the last 2 hours will be a guaranteed error.
            const ERRORS_WITH_PERCENTAGE = [["system.outage", 4, 10]]

            // Distribute the load by the time of day, by default the "peak" is around midday
            // - First field is the hour of the day, so 0 being midnight.
            // - Second field is the percentage distribution.
            // As usual, all percentages must add up to 100.
            const TIMES_OF_DAY = [
              [0, 1],
              [1, 1],
              [2, 1],
              [3, 1],
              [4, 2],
              [5, 3],
              [6, 3],
              [7, 4],
              [8, 6],
              [9, 9],
              [10, 9],
              [11, 10],
              [12, 10],
              [13, 9],
              [14, 9],
              [15, 6],
              [16, 4],
              [17, 3],
              [18, 3],
              [19, 2],
              [20, 1],
              [21, 1],
              [22, 1],
              [23, 1],
            ]

            const VARIABLES = {
              EVENT_PROVIDER: EVENT_PROVIDER,
              PROCESS_STEPS: PROCESS_STEPS,
              LOCATIONS_WITH_PERCENTAGE: LOCATIONS_WITH_PERCENTAGE,
              SEGMENT: SEGMENT,
              SEGMENTS: SEGMENTS,
              HOST_ENTITY: HOST_ENTITY,
              CORRELATION_ID: CORRELATION_ID,
              ERRORS_WITH_PERCENTAGE: ERRORS_WITH_PERCENTAGE,
              TIMES_OF_DAY: TIMES_OF_DAY,
              FLOW_NAME: FLOW_NAME,
              REVENUE: REVENUE,
              LOCATIONS: LOCATIONS,
              OPTIONAL_STEP: OPTIONAL_STEP,
              EXAMPLE_DASHBOARD: EXAMPLE_DASHBOARD,
            }

            return VARIABLES
          }
      position:
        x: 0
        y: 1
      predecessors: []
      conditions:
        states: {}
    create_bizflow:
      name: create_bizflow
      description: Build a custom task running js Code
      action: dynatrace.automations:run-javascript
      active: true
      input:
        script: >-
          // Import of sdk modules

          import { execution } from '@dynatrace-sdk/automation-utils';

          import { settingsObjectsClient } from
          "@dynatrace-sdk/client-classic-environment-v2";

          import { appEngineRegistryAppsClient } from
          '@dynatrace-sdk/client-app-engine-registry';


          export default async function ({ execution_id }) {

            // Variable declaration
            const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/config/result`);
            const configBody = await configGet.json();
              
            const EVENT_PROVIDER = configBody['EVENT_PROVIDER'];
            const PROCESS_STEPS = configBody['PROCESS_STEPS'];
            const SEGMENT_INDEX = configBody['SEGMENT'][1];
            const SEGMENT_NAME = configBody['SEGMENT'][0]; 
            const SEGMENTS = configBody['SEGMENTS'];
            const CORRELATION_ID = configBody['CORRELATION_ID'];
            const ERRORS_WITH_PERCENTAGE = configBody['ERRORS_WITH_PERCENTAGE'];
            const LOCATIONS = configBody['LOCATIONS'];
            const REVENUE_NAME = configBody['REVENUE'][0];
            const REVENUE_INDEX = configBody['REVENUE'][1];
            const REVENUE_MIN = configBody['REVENUE'][2];
            const REVENUE_MAX = configBody['REVENUE'][3];
            const REVENUE_PRETTY_NAME = configBody['REVENUE'][4];
            const OPTIONAL_STEP = configBody['OPTIONAL_STEP'];
            const FLOW_NAME = configBody['FLOW_NAME'];
            var bizFlowCheck = false;
            var appInstallCheck = false;
            const EXTERNAL_ID = EVENT_PROVIDER.replaceAll(".", "-") + "-bizflow";
            console.log("External ID: " + EXTERNAL_ID);

            // Check if the BizFlow app is already installed.
            const apps = await appEngineRegistryAppsClient.getApps();
            apps.apps.forEach((app) => {
              if(app['id'] == "dynatrace.biz.flow"){
                appInstallCheck = true;
              }
            })  

            // Check if there is a config that already exists for the BizFlow app (defined
            // by the "externalId" property).
            const data = await settingsObjectsClient.getSettingsObjects({
              fields: "objectId,value, externalId",
              filter: "externalId = '" + EXTERNAL_ID + "'",
              schemaIds: "app:dynatrace.biz.flow:biz-flow-settings"
            }).then((result) => {
              if(result['totalCount'] > 0) {
                bizFlowCheck = true
              }
            })  

            

            // Function for checking if a certain step should return an error.
            const checkIfError = (step) => {
              var isError = false;
              var errorName = "";
              ERRORS_WITH_PERCENTAGE.forEach((item) => {
                if(step == item[1]) {
                  isError = true;
                  errorName = item[0];
                }
              })
            
              const errorResult = {
                "isError": isError,
                "errorName": errorName
              }
              
              return errorResult;
            }




                // If BizFlow app is installed and there is no existing config, then continue.
                if(bizFlowCheck == false && appInstallCheck == true) {
              
                // Declaration of the main body to send to Settings 2.0, the main important fields
                // are "schemaId", "externalId", "scope" and "value". Value is the "actual" config for
                // the BizFlow which will be constructed below.
                var sendBody = [
                  {
                    "schemaId": "app:dynatrace.biz.flow:biz-flow-settings",
                    "externalId": EXTERNAL_ID,
                    "scope": "environment",
                    "value": {
                        "name": FLOW_NAME,
                        "steps": [],
                        "connections": [],
                        "correlationID": CORRELATION_ID,
                        "kpiLabel": REVENUE_PRETTY_NAME,
                        "isSmartscapeTopologyEnabled": false,
                        "isDefaultQueryLimitIgnored": false,
                        "kpi": REVENUE_NAME,
                        "kpiEvent": {
                          "name": PROCESS_STEPS[REVENUE_INDEX[0]][1],
                          "provider": EVENT_PROVIDER
                        },
                        "analysisType": "fulfillment"
                    }
                  }
                ];
              
                var steps = new Array;
              
                // Loop through all the steps in the process, as defined by the "config" part of the 
                // Workflow.
                PROCESS_STEPS.forEach((item, index) => {
              
                  // If it's the very first step, this is our "root" step.
                  if(index == 0) {
                    var isRoot = true;
                  }
                  else {
                    var isRoot = false;
                  }
                    
                  // Declare the config for each "successful" step like it's "name" and "id" as well as
                  // which BizEvents define it. Errors are added in further down.
                  var step = {
                    "name": item[0],
                    "id": crypto.randomUUID(),
                    "isRoot": isRoot,
                    "events": [
                      {
                        "id": "provider:" + EVENT_PROVIDER + "-event:" + item[1],
                        "name": item[1],
                        "provider": EVENT_PROVIDER,
                        "isError": false,
                        "isDisabled": false
                      }
                    ]
                  }
                
                  sendBody[0]["value"]["steps"].push(step);
                  
                })
              
                var connections = [];
              
                // Loop through the steps again and create the "connections" or "relationships" between them.
                // For example what order are they in, and do we need to build any "loops" or "optional" steps.
                // Errors are also defined in this section.
                PROCESS_STEPS.forEach((item, index) => {
                  if(index != sendBody[0]["value"]["steps"].length-1) {
                    var connection = {
                      "id": sendBody[0]["value"]["steps"][index]["id"] + "__" + sendBody[0]["value"]["steps"][index+1]["id"],
                      "source": sendBody[0]["value"]["steps"][index]["id"],
                      "target": sendBody[0]["value"]["steps"][index+1]["id"]
                    }
              
                    sendBody[0]["value"]["connections"].push(connection);
              
                    if(index == OPTIONAL_STEP[0]) {
                      var optionalConnection = {
                        "id": sendBody[0]["value"]["steps"][index-1]["id"] + "__" + sendBody[0]["value"]["steps"][index+1]["id"],
                        "source": sendBody[0]["value"]["steps"][index-1]["id"],
                        "target": sendBody[0]["value"]["steps"][index+1]["id"]
                      }
              
                      sendBody[0]["value"]["connections"].push(optionalConnection);
                    }
              
                    if(item[5] == true) {
                      var repeatConnection = {
                        "id": sendBody[0]["value"]["steps"][index]["id"] + "__" + sendBody[0]["value"]["steps"][index]["id"],
                        "source": sendBody[0]["value"]["steps"][index]["id"],
                        "target": sendBody[0]["value"]["steps"][index]["id"]
                      }
              
                      sendBody[0]["value"]["connections"].push(repeatConnection);
                    }
              
                    // Here is where any errors are added into the "steps" configuration.
                    if(checkIfError(index)["isError"] == true) {
              
                      var errorEvent = {
                        "id": "provider:" + EVENT_PROVIDER + "-event:" + item[1] + "." + checkIfError(index)["errorName"],
                        "name": item[1] + "." + checkIfError(index)["errorName"],
                        "provider": EVENT_PROVIDER,
                        "isError": true,
                        "isDisabled": false
                      }
                      sendBody[0]["value"]["steps"][index]["events"].push(errorEvent);
                    }
                  }
                })
              
              
                console.log(sendBody[0]);  
                // Send the object we've constructed into the Settings 2.0 storage.
                   
                  const data =
                    await settingsObjectsClient.postSettingsObjects({
                      body: [sendBody[0]],
                    });
                
                  console.log(data);
              
                  return data[0]["objectId"];
              
                
              
                 
                }
              
                // Logic for handling if a BizFlow config already exists.
                else if(bizFlowCheck == true) {
                  console.log("Biz flow exists, skipping.");
                }
              
                // Logic for handling if the BizFlow app is not installed.
                else if(appInstallCheck == false){
                  console.log("App not installed, skipping.");
                }
              
                // Logic for handling any other issues.
                else {
                  console.log("Skipping for unknown reason.");
                }      

            


            
          }
      position:
        x: -2
        y: 3
      predecessors:
        - check_if_data_exists
      conditions:
        states:
          check_if_data_exists: OK
    generate_new_data:
      name: generate_new_data
      description: Build a custom task running js Code
      action: dynatrace.automations:run-javascript
      active: true
      input:
        script: >
          // Numbers for reference

          const MS_IN_S = 1000;

          const MS_IN_MINUTE = 60 * MS_IN_S;

          const MS_IN_HOUR = 60 * MS_IN_MINUTE;

          const MS_IN_DAY = 24 * MS_IN_HOUR;


          export default async function ({ execution_id }) {

            // Variable declaration
            const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/config/result`);
            const configBody = await configGet.json();
              
            const EVENT_PROVIDER = configBody['EVENT_PROVIDER'];
            const PROCESS_STEPS = configBody['PROCESS_STEPS'];
            const LOCATIONS_WITH_PERCENTAGE = configBody['LOCATIONS_WITH_PERCENTAGE'];
            const SEGMENT_INDEX = configBody['SEGMENT'][1];
            const SEGMENT_NAME = configBody['SEGMENT'][0]; 
            const SEGMENTS = configBody['SEGMENTS'];
            const HOST_ENTITY = configBody['HOST_ENTITY'];
            const CORRELATION_ID = configBody['CORRELATION_ID'];
            const ERRORS_WITH_PERCENTAGE = configBody['ERRORS_WITH_PERCENTAGE'];
            const TIMES_OF_DAY = configBody['TIMES_OF_DAY']; 
            const LOCATIONS = configBody['LOCATIONS'];
            const REVENUE_NAME = configBody['REVENUE'][0];
            const REVENUE_INDEX = configBody['REVENUE'][1];
            const REVENUE_MIN = configBody['REVENUE'][2];
            const REVENUE_MAX = configBody['REVENUE'][3];
            const OPTIONAL_STEP = configBody['OPTIONAL_STEP'];

            // Function for getting random values with probabilities (which is why we have all the numbers
            // stacked up in the arrays above)
            const getRandomWithProbability = (array) => {
              const filled = array.flatMap(([value, prob]) => Array.from({ length: prob }).fill(value));
              const random = Math.floor(Math.random() * filled.length);
              return filled[random];
            }
            
            // Function to check if we need to throw an error for a given event
            const checkIfError = (step) => {
              var isError = false;
              var errorName = "";
              ERRORS_WITH_PERCENTAGE.forEach((item) => {
                if(step == item[1] && getRandomInt([1,100]) < item[2]) {
                  isError = true;
                  errorName = item[0];
                }
              })
            
              const errorResult = {
                "isError": isError,
                "errorName": errorName
              }
              
              return errorResult;
            }
            
            //Function for getting a random value from an array
            const getRandomFromArray = (array) => array[Math.floor(Math.random() * array.length)];
            
            // Function for getting a random number between 2 integers
            // The maximum is exclusive and the minimum is inclusive
            const getRandomInt = ([min, max]) => Math.floor(Math.random() * (max - min) + min);

            const addExtraAttributes = (index, event) => {
              
              // Do we add a location?
              if(LOCATIONS.includes(index) == true) {event['location'] = LOCATION;}
                    
              // Do we add a segment?
              if(SEGMENT_INDEX.includes(index) == true) {event[SEGMENT_NAME] = SEGMENT;}
                    
              // Do we add revenue?
              if(REVENUE_INDEX.includes(index) == true) {event[REVENUE_NAME] = getRandomInt([REVENUE_MIN,REVENUE_MAX]);}    

              return event;
            }

            const checkIfOptional = (index) => {
              if(OPTIONAL_STEP.includes(index) == true) { return OPTIONAL_STEP[1]; } else { return false; }
            }

            const checkIfLoop = (index) => {
              if(PROCESS_STEPS[index][5] == true) { return PROCESS_STEPS[index][6]; } else { return false; }
            }
            
            
            const now = new Date();
            const nowMinusTwentyFourH = now - (MS_IN_DAY - 300000);
            const nowMinusFiveM = now - (MS_IN_MINUTE * 5);
            const nowMinusTwoH = now - (MS_IN_HOUR * 2);
            const nowPlusTenM = new Date(now + (MS_IN_MINUTE * 10));
            
            let flows = [];

            // Run through and create up to 2 events every 5 minutes - this should produce a similar
            // load profile to carry on what the "data generator" did
            for(let i=0; i<5; i++) {

              // Based on the time of day, choose if an event is going to get generated
              var rollRandom = getRandomInt([0, 100]);
              var makeNewEvent = TIMES_OF_DAY[now.getHours()][1] * 10;

             if(rollRandom < makeNewEvent) {

               
              // Set the high level attributes which will apply across all events
              // Start time is set here for the first event, then all others are relative to this
              var LOCATION = getRandomWithProbability(LOCATIONS_WITH_PERCENTAGE);
              var UID = crypto.randomUUID();
              var SEGMENT = getRandomWithProbability(SEGMENTS);
              var HOST = getRandomWithProbability(HOST_ENTITY);
              var START_TIME = new Date(nowMinusTwentyFourH + (getRandomInt([1, now.getTime() - nowMinusTwentyFourH])));
              START_TIME.setHours(getRandomWithProbability(TIMES_OF_DAY));

              // If the start time has a chance of being slightly later this hour, then
              // wind it back 24 hours
              if(START_TIME.getHours() > now.getHours()) {
                START_TIME = new Date(START_TIME - MS_IN_DAY);
              }

               // Keep going until the start time falls in the desired range
              while (START_TIME > now || START_TIME < nowMinusFiveM) {
                 START_TIME = new Date(nowMinusTwentyFourH + (getRandomInt([1, now - nowMinusTwentyFourH]))); 

                 if(START_TIME.getHours() > now.getHours()) {
                   START_TIME = START_TIME - MS_IN_DAY;
                 }      
              }
              
              var stop = false;

              // Loop through every step that you've defined, checks will be made for:
              // 1. Do we need to "drop off" based on the probability you defined
              // 2. Do we need to "throw an error" based on the errors defined above and stop
              PROCESS_STEPS.forEach((item, index) => {

                // If it's the first step, run this loop
                if(index == 0) {
                  var event = {
                    "event.provider": EVENT_PROVIDER,
                    "event.type": item[1],
                    [CORRELATION_ID]: UID,
                    "dt.entity.host": HOST,
                    "timestamp": START_TIME,
                  }

                  addExtraAttributes(index, event);
                  
                  stop = false;

                  flows.push(event);
                }

                // If it's the second step, run this loop
                // Where an event is in the future it will be put under the same event.provider with
                // ".temp" added to the end and be picked up by the "follow-uper" when the right time comes        
                else if (index > 0 && getRandomInt([0, 100]) > PROCESS_STEPS[index][2] && stop == false) {
                  
                  START_TIME = new Date(START_TIME.getTime() + getRandomInt([PROCESS_STEPS[index][3] * MS_IN_HOUR, PROCESS_STEPS[index][4] * MS_IN_HOUR]));

                  if(START_TIME < now) {
                    var eventType = item[1];
                    stop = false;

                    var errorState = checkIfError(index);
                    
                    if(START_TIME > nowMinusTwoH && errorState["isError"] == true) {
                      eventType = item[1] + "." + errorState["errorName"];
                      stop = true;
                      
                    }
                    else {
                      stop = false;
                    }
                    
                    var event = {
                      "event.provider": EVENT_PROVIDER,
                      "event.type": eventType,
                      [CORRELATION_ID]: UID,
                      "dt.entity.host": HOST,
                      "timestamp": START_TIME
                    }

                    addExtraAttributes(index, event);
                    
                    if(checkIfLoop(index) != false) {
                        var numberOfLoops = getRandomInt([1,checkIfLoop(index)+1]);
                        var timestamp;
                        
                        for(var x=0;x<numberOfLoops;x++){

                          var maxTime = ((PROCESS_STEPS[index+1][3] * MS_IN_HOUR) * 0.9) + START_TIME.getTime();
                          timestamp = new Date(getRandomInt([6000,(maxTime - START_TIME.getTime())]) + START_TIME.getTime());
                          
                          var loopEvent = {
                              "event.provider": EVENT_PROVIDER,
                              "event.type": eventType,
                              [CORRELATION_ID]: UID,
                              "dt.entity.host": HOST,
                              "timestamp": timestamp.toISOString()                              
                          }
                          
                          loopEvent = addExtraAttributes(index, loopEvent);
                          
                          if(timestamp > nowPlusTenM) {
                            console.log("It's in the future: " + UID);
                            loopEvent["timestamp"] = now.toISOString();
                            loopEvent["future.timestamp"] = timestamp.toISOString();
                            loopEvent["event.type"] = eventType;
                            loopEvent["event.provider"] = EVENT_PROVIDER + ".temp";
                          }
                          
                          flows.push(loopEvent);
                        }              
                      }            
                      
                      else if(checkIfOptional(index) == false) {
                        flows.push(event);
                      }  

                      else if(getRandomInt([0, 100]) < checkIfOptional(index)) {   
                        flows.push(event);  
                      }
                 }   
                 else {
                   var errorState = checkIfError(index);
                   if(errorState["isError"] == true) {
                     eventType = item[1] + '.' + errorState["errorName"];
                     stop = true;
                   }
                   else {
                     eventType = item[1];
                     stop = false;
                   }
                   
                   var event = {
                    "event.provider": EVENT_PROVIDER + ".temp",
                    "event.type": eventType,
                    [CORRELATION_ID]: UID,
                    "dt.entity.host": HOST,
                    "future.timestamp": START_TIME,
                    "timestamp": now.toISOString()
                   }
                   
                     addExtraAttributes(index, event);

                     if(checkIfLoop(index) != false) {
                        var numberOfLoops = getRandomInt([1,checkIfLoop(index)+1]);
                        var timestamp;
                        
                        for(var x=0;x<numberOfLoops;x++){

                          var maxTime = ((PROCESS_STEPS[index+1][3] * MS_IN_HOUR) * 0.9) + START_TIME.getTime();
                          timestamp = new Date(getRandomInt([6000,(maxTime - START_TIME.getTime())]) + START_TIME.getTime());

                          var loopEvent = {
                              "event.provider": EVENT_PROVIDER + ".temp",
                              "event.type": eventType,
                              [CORRELATION_ID]: UID,
                              "dt.entity.host": HOST,
                              "timestamp": now.toISOString(),
                              "future.timestamp": timestamp.toISOString()
                          }

                          loopEvent = addExtraAttributes(index, loopEvent);
                          
                          flows.push(loopEvent);
                        }              
                      }  
                     
                     else if(checkIfOptional(index) == false) {
                       flows.push(event);
                     }  

                     else if(getRandomInt([0, 100]) < checkIfOptional(index)) {   
                       flows.push(event);  
                     }
                  }
                 
                }

                else {
                  stop = true;        
                }
                
              });

             }
              
            }

            
            
              console.log("Sending generated events via API for " + flows.length + " flows, size: " + new Blob([JSON.stringify(flows)]).size + " bytes.");
              
              const result = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(flows),
              });

              console.log("Response from API call:");
              console.log(result);
            
            return JSON.stringify(flows);
          }
      position:
        x: 0
        y: 2
      predecessors:
        - config
      conditions:
        states:
          config: OK
    check_if_data_exists:
      name: check_if_data_exists
      description: Executes DQL query
      action: dynatrace.automations:execute-dql-query
      active: true
      input:
        query: |-
          fetch bizevents
          | filter event.provider == "{{result('config').EVENT_PROVIDER}}"
      position:
        x: -1
        y: 2
      predecessors:
        - config
      conditions:
        states:
          config: OK
    generate_historical_data:
      name: generate_historical_data
      description: Build a custom task running js Code
      action: dynatrace.automations:run-javascript
      active: true
      input:
        script: >
          import { execution } from '@dynatrace-sdk/automation-utils';


          export default async function ({ execution_id }) {

            // Variable declaration
            const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/config/result`);
            const configBody = await configGet.json();
              
            const EVENT_PROVIDER = configBody['EVENT_PROVIDER'];
            const PROCESS_STEPS = configBody['PROCESS_STEPS'];
            const LOCATIONS_WITH_PERCENTAGE = configBody['LOCATIONS_WITH_PERCENTAGE'];
            const SEGMENT_INDEX = configBody['SEGMENT'][1];
            const SEGMENT_NAME = configBody['SEGMENT'][0]; 
            const SEGMENTS = configBody['SEGMENTS'];
            const HOST_ENTITY = configBody['HOST_ENTITY'];
            const CORRELATION_ID = configBody['CORRELATION_ID'];
            const ERRORS_WITH_PERCENTAGE = configBody['ERRORS_WITH_PERCENTAGE'];
            const TIMES_OF_DAY = configBody['TIMES_OF_DAY']; 
            const LOCATIONS = configBody['LOCATIONS'];
            const REVENUE_NAME = configBody['REVENUE'][0];
            const REVENUE_INDEX = configBody['REVENUE'][1];
            const REVENUE_MIN = configBody['REVENUE'][2];
            const REVENUE_MAX = configBody['REVENUE'][3];
            const OPTIONAL_STEP = configBody['OPTIONAL_STEP'];

            // Check if data exists already - if it does, don't run this again
            const historyGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/check_if_data_exists/result`);
            const historyBody = await historyGet.json();  
            var historyCheck = true;
            
            if(historyBody.records.length == 0 || historyBody.records.length == undefined) {
              historyCheck = false;
            }
            else {
              historyCheck = true;
            }

            // Override if needed, set this to "false" if you need to get more historical data
            // for any reason
            //historyCheck = false;
            
            // Numbers for reference
            const MS_IN_S = 1000;
            const MS_IN_MINUTE = 60 * MS_IN_S;
            const MS_IN_HOUR = 60 * MS_IN_MINUTE;
            const MS_IN_DAY = 24 * MS_IN_HOUR;
            
            // Function for getting random values with probabilities (which is why we have all the numbers
            // stacked up in the arrays above)
            const getRandomWithProbability = (array) => {
              const filled = array.flatMap(([value, prob]) => Array.from({ length: prob }).fill(value));
              const random = Math.floor(Math.random() * filled.length);
              return filled[random];
            }
            
            // Function to check if we need to throw an error for a given event
            const checkIfError = (step) => {
              var isError = false;
              var errorName = "";
              ERRORS_WITH_PERCENTAGE.forEach((item) => {
                if(step == item[1]) {
                  isError = true;
                  errorName = item[0];
                }
              })
            
              const errorResult = {
                "isError": isError,
                "errorName": errorName
              }
              
              return errorResult;
            }
            
            //Function for getting a random value from an array
            const getRandomFromArray = (array) => array[Math.floor(Math.random() * array.length)];
            
            // Function for getting a random number between 2 integers
            // The maximum is exclusive and the minimum is inclusive
            const getRandomInt = ([min, max]) => Math.floor(Math.random() * (max - min) + min);

            const addExtraAttributes = (index, event) => {
              
              // Do we add a location?
              if(LOCATIONS.includes(index) == true) {event['location'] = LOCATION;}
                    
              // Do we add a segment?
              if(SEGMENT_INDEX.includes(index) == true) {event[SEGMENT_NAME] = SEGMENT;}
                    
              // Do we add revenue?
              if(REVENUE_INDEX.includes(index) == true) {event[REVENUE_NAME] = getRandomInt([REVENUE_MIN,REVENUE_MAX]);}    

              return event;
            }

            const checkIfOptional = (index) => {
              if(OPTIONAL_STEP.includes(index) == true) { return OPTIONAL_STEP[1]; } else { return false; }
            }

            const checkIfLoop = (index) => {
              if(PROCESS_STEPS[index][5] == true) { return PROCESS_STEPS[index][6]; } else { return false; }
            }


            const now = new Date();
            const nowMinusTwentyFourH = now - (MS_IN_DAY - 300000);
            const nowMinusTwoH = now - (MS_IN_HOUR * 2);
            const nowPlusTenM = new Date(now + (MS_IN_MINUTE * 10));

            console.log(nowMinusTwoH);
            console.log(nowPlusTenM);
            
            let flows = [];

            // Run through and create 500 events over the last 24 hours
            // If you alter this, make sure to alter the "follow-uper"
            if(historyCheck == false) {

                console.log("No existing events detected - generating data for last 24 hours.");
              
                for(let i=0; i<500; i++) {
            
                // Set the high level attributes which will apply across all events
                // Start time is set here for the first event, then all others are relative to this
                var LOCATION = getRandomWithProbability(LOCATIONS_WITH_PERCENTAGE);
                var UID = crypto.randomUUID();
                var SEGMENT = getRandomWithProbability(SEGMENTS);
                var HOST = getRandomWithProbability(HOST_ENTITY);
                var START_TIME = new Date(nowMinusTwentyFourH + (getRandomInt([1, now.getTime() - nowMinusTwentyFourH])));
                START_TIME.setHours(getRandomWithProbability(TIMES_OF_DAY));
            
                // If the start time has a chance of being slightly later this hour, then
                // wind it back 24 hours
                if(START_TIME.getHours() > now.getHours()) {
                  START_TIME = new Date(START_TIME - MS_IN_DAY);
                }
            
                // Keep going until the start time falls in the desired range
                while (START_TIME > now || START_TIME < nowMinusTwentyFourH) {
                   START_TIME = new Date(nowMinusTwentyFourH + (getRandomInt([1, now - nowMinusTwentyFourH]))); 
            
                   if(START_TIME.getHours() > now.getHours()) {
                     START_TIME = START_TIME - MS_IN_DAY;
                   }      
                }
                
                var stop = false;
            
                // Loop through every step that you've defined, checks will be made for:
                // 1. Do we need to "drop off" based on the probability you defined
                // 2. Do we need to "throw an error" based on the errors defined above and stop
                PROCESS_STEPS.forEach((item, index) => {
            
                  // If it's the first step, run this loop
                  if(index == 0) {
                    var event = {
                      "event.provider": EVENT_PROVIDER,
                      "event.type": item[1],
                      [CORRELATION_ID]: UID,
                      "dt.entity.host": HOST,
                      "timestamp": START_TIME,
                    }
                    
                    addExtraAttributes(index, event);
                    
                    stop = false;

                    flows.push(event);
                  }
            
                  // If it's the second step, run this loop
                  // Where an event is in the future it will be put under the same event.provider with
                  // ".temp" added to the end and be picked up by the "follow-uper" when the right time comes
                  else if (index > 0 && getRandomInt([0, 100]) > PROCESS_STEPS[index][2] && stop == false) {
                    
                    START_TIME = new Date(START_TIME.getTime() + getRandomInt([PROCESS_STEPS[index][3] * MS_IN_HOUR, PROCESS_STEPS[index][4] * MS_IN_HOUR]));
            
                    if(START_TIME < now) {
                      var eventType = item[1];
                      stop = false;
                      
                      if(START_TIME > nowMinusTwoH && checkIfError(index)["isError"] == true) {
                        eventType = item[1] + "." + checkIfError(index)["errorName"];
                        stop = true;
                      }

                      var event = {
                        "event.provider": EVENT_PROVIDER,
                        "event.type": eventType,
                        [CORRELATION_ID]: UID,
                        "dt.entity.host": HOST,
                        "timestamp": START_TIME
                      }

                      addExtraAttributes(index, event);

                      if(checkIfLoop(index) != false) {
                        var numberOfLoops = getRandomInt([1,checkIfLoop(index)+1]);
                        var timestamp;
                        
                        for(var x=0;x<numberOfLoops;x++){

                          var maxTime = ((PROCESS_STEPS[index+1][3] * MS_IN_HOUR) * 0.9) + START_TIME.getTime();
                          timestamp = new Date(getRandomInt([6000,(maxTime - START_TIME.getTime())]) + START_TIME.getTime());
                          
                          var loopEvent = {
                              "event.provider": EVENT_PROVIDER,
                              "event.type": eventType,
                              [CORRELATION_ID]: UID,
                              "dt.entity.host": HOST,
                              "timestamp": timestamp.toISOString()                              
                          }
                          
                          loopEvent = addExtraAttributes(index, loopEvent);
                          
                          if(timestamp > nowPlusTenM) {
                            loopEvent["timestamp"] = now.toISOString();
                            loopEvent["future.timestamp"] = timestamp.toISOString();
                            loopEvent["event.type"] = eventType;
                            loopEvent["event.provider"] = EVENT_PROVIDER + ".temp";
                          }
                          
                          flows.push(loopEvent);
                        }              
                      }            
                      
                      else if(checkIfOptional(index) == false) {
                        flows.push(event);
                      }  

                      else if(getRandomInt([0, 100]) < checkIfOptional(index)) {   
                        flows.push(event);  
                      }


                      
                   }   
                   else {
                     var event = {
                      "event.provider": EVENT_PROVIDER + ".temp",
                      "event.type": item[1],
                      [CORRELATION_ID]: UID,
                      "dt.entity.host": HOST,
                      "future.timestamp": START_TIME,
                      "timestamp": now.toISOString()
                     }
                     
                     addExtraAttributes(index, event);

                      if(checkIfLoop(index) != false) {
                        var numberOfLoops = getRandomInt([1,checkIfLoop(index)+1]);
                        var timestamp;
                        
                        for(var x=0;x<numberOfLoops;x++){

                          var maxTime = ((PROCESS_STEPS[index+1][3] * MS_IN_HOUR) * 0.9) + START_TIME.getTime();
                          timestamp = new Date(getRandomInt([6000,(maxTime - START_TIME.getTime())]) + START_TIME.getTime());

                          var loopEvent = {
                              "event.provider": EVENT_PROVIDER,
                              "event.type": eventType,
                              [CORRELATION_ID]: UID,
                              "dt.entity.host": HOST,
                              "timestamp": now.toISOString(),
                              "future.timestamp": timestamp.toISOString()
                          }

                          loopEvent = addExtraAttributes(index, loopEvent);
                          
                          flows.push(loopEvent);
                        }              
                      }  
                     
                     else if(checkIfOptional(index) == false) {
                       flows.push(event);
                     }  

                     else if(getRandomInt([0, 100]) < checkIfOptional(index)) {   
                       flows.push(event);  
                     }
                  }
                   
                }
            
                else {
                    stop = true;        
                }
                  
              });
                
              }
              //Send all the events into the BizEvents API

              console.log("Sending generated events via API for " + flows.length + " flows, size: " + new Blob([JSON.stringify(flows)]).size + " bytes.");
              
              const result = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(flows),
              });

              console.log("Response from API call:");
              console.log(result);
            }

            else {
              console.log("Data already exists, skipping data generation.");
            }


            return;
          }
      position:
        x: -1
        y: 3
      predecessors:
        - check_if_data_exists
      conditions:
        states:
          check_if_data_exists: OK
    process_temporary_events:
      name: process_temporary_events
      description: Build a custom task running js Code
      action: dynatrace.automations:run-javascript
      active: true
      input:
        script: >-
          // Import of required SDK modules

          import { execution } from '@dynatrace-sdk/automation-utils';

          import { queryExecutionClient } from '@dynatrace-sdk/client-query';


          // Numbers for reference

          const MS_IN_S = 1000;

          const MS_IN_MINUTE = 60 * MS_IN_S;

          const MS_IN_HOUR = 60 * MS_IN_MINUTE;

          const MS_IN_DAY = 24 * MS_IN_HOUR;


          export default async function ({ execution_id }) {

            // Variable declaration
            const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/config/result`);
            const configBody = await configGet.json();
              
            const EVENT_PROVIDER = configBody['EVENT_PROVIDER'];
            const PROCESS_STEPS = configBody['PROCESS_STEPS'];
            const CORRELATION_ID = configBody['CORRELATION_ID'];
            const OPTIONAL_STEP = configBody['OPTIONAL_STEP'][0];
            
            const ex = await execution(execution_id);

            // Get the details about what the time is now, we'll use this to calculate
            // the sliding window that we need to create
            const now = new Date();
            const currentS = now.getSeconds();
            const currentMs = now.getMilliseconds();

            // Create a start timestamp which is 6 minutes ago, and a finish timestamp which is
            // 1 minute ago (shifted to take off extra seconds/milliseconds)
            const start = now - (currentS * MS_IN_S) - currentMs - (360 * MS_IN_S);
            const finish = now - (currentS * MS_IN_S) - currentMs - (60 * MS_IN_S);

            // Query to check in this sliding window for events which need to be processed
            // into "permanent" from the ".temp" provider
            var query = 'fetch bizevents, from:-30d | filter event.provider == "' + EVENT_PROVIDER + '.temp" | filter toTimestamp(future.timestamp) > toTimestamp(' + start * 1000000 + ') AND toTimestamp(future.timestamp) < toTimestamp(' + finish * 1000000 + ')';

            console.log(query);
            
            // Execute the query and get the results back
            const queryTempRecords = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: 60 * 1000, fetchTimeoutSeconds: 60  } });
            const records = queryTempRecords.result.records;

            if(records.length == 0) {
              console.log("No records to process.");
              return;
            }

            else {
            
              var events = [];
              var timestamp = "";
              const nowMinusTwentyFourH = now - (MS_IN_DAY - 300000);
            
              var filterText = '| filter in(' + CORRELATION_ID;  
            
              console.log(records);
              
              // Loop through each of the records and create the permanent event ready to be sent
              records.forEach((item) => {  
            
                filterText = filterText + ',"' + item[CORRELATION_ID] + '"';
            
                var futureTimestamp = new Date(item["future.timestamp"]);
            
                // If the future timestamp attribute is less than 24 hours ago and less than now, then
                // continue because the API will take it
                if(futureTimestamp > nowMinusTwentyFourH && futureTimestamp < now) {
                       
                  // Replace the timestamp with the "future timestamp" we gave it and 
                  // remove unwanted fields
                  timestamp = item["future.timestamp"];
                  item["timestamp"] = timestamp;
                  item["event.provider"] = EVENT_PROVIDER;
                  delete item["future.timestamp"];
                  delete item["lookup.timestamp"];
                  delete item["event.id"];
                  delete item["event.kind"];
                  delete item["dt.openpipeline.pipelines"];
                  delete item["dt.openpipeline.source"];
            
                  events.push(item);
                }    
              })
            
              
              // Create a "summarize" statement used for a query below to check for missing events for specific flow.
              var summaryText = "| summarize ";
              
              for(var i=0;i<PROCESS_STEPS.length;i++) {
                summaryText = summaryText + PROCESS_STEPS[i][1] + " = countIf(event.type == \"" + PROCESS_STEPS[i][1] + "\"), ";
              }
            
              summaryText = summaryText + "by:{" + CORRELATION_ID + "}";
                
              
              
              
              // Build a statement which will summarize whether each step has been performed for a given flow.
              query = 'fetch bizevents, from:-30d | filter event.provider == "' + EVENT_PROVIDER + '"' + filterText + ')' + summaryText;
            
              console.log(query);
            
              const queryPreviousRecords = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: 60 * 1000, fetchTimeoutSeconds: 60  } });
              const previousRecords = queryPreviousRecords.result.records;  
            
              console.log(previousRecords);
            
              var stepNumber;
              var confirmedEvents = [];
            
              // Go through each event that we've just made "permanent" and check that there's no missing steps
              // before the one that we're processing. Events without missing steps will be put into the 
              // "confirmedEvents" list to be sent.
              events.forEach((item) => {  
            
                var missingEvent = 0;
                var stepIndex = 0;
                
                for(var i=0;i<PROCESS_STEPS.length;i++){
                  if(PROCESS_STEPS[i][1] == item["event.type"]) {
                    stepIndex = i;
                  }
                } 
                    
            
                for(var y=0;y<previousRecords.length;y++){
                  if(previousRecords[y][CORRELATION_ID] == item[CORRELATION_ID]){
                    
                    for(var x=0; x<stepIndex; x++) {
                     
                      if(previousRecords[y][PROCESS_STEPS[x][1]] == 0) {
            
                        if(x != OPTIONAL_STEP){
                          console.log("Step missing:");
                          missingEvent++;
                          console.log(previousRecords[y]);              
                        }
                      }
                    }
                  }         
                }
            
                if(missingEvent == 0){
                  confirmedEvents.push(item);
                }
              })
            
              console.log("Dropping " + (events.length - confirmedEvents.length) + " out of " + events.length + " events.");
              
              
              //Send all the new permanent events into the BizEvents API
              const result = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(confirmedEvents),
              });
            
              console.log(result);
              
              return JSON.stringify(confirmedEvents);
            }  
          }
      position:
        x: 1
        y: 2
      predecessors:
        - config
      conditions:
        states:
          config: OK
    add_retail_template_dashboard:
      name: add_retail_template_dashboard
      description: Build a custom task running js Code
      action: dynatrace.automations:run-javascript
      active: true
      input:
        script: >-
          import * as AppEnv from '@dynatrace-sdk/app-environment';

          import { execution } from '@dynatrace-sdk/automation-utils';

          import { documentsClient } from "@dynatrace-sdk/client-document";


          export default async function ({ execution_id }) {

            // Variable declaration
            const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/config/result`);
            const configBody = await configGet.json();

            const environmentUrl = AppEnv.getEnvironmentUrl();
            const eventProvider = configBody['EVENT_PROVIDER'];
            const dashboardExample = configBody['EXAMPLE_DASHBOARD'];
            const flowName = configBody['FLOW_NAME'];
            const EXTERNAL_ID = eventProvider.replaceAll(".", "-") + "-dashboard";
            var bizFlowUrl;
            var dashboardCheck;
            
            // Look for a BizFlow ID coming from the previous step
            const bizFlowGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/create_bizflow/result`);
            const bizFlowBody = await bizFlowGet.json();

            // If there is a BizFlow created, construct a URL for the dashboard drilldown.
            // Otherwise, replace it with a link to install the BizFlow in the Hub.
            if(JSON.stringify(bizFlowBody) != "{}"){
              bizFlowUrl = environmentUrl + "/ui/apps/dynatrace.biz.flow/analyze/" + bizFlowBody;
              console.log("Biz flow has been created, making proper URL: " + bizFlowUrl);
            }
            else {
              bizFlowUrl = environmentUrl + "/ui/apps/dynatrace.hub/browse?details=dynatrace.biz.flow";
              console.log("Biz flow not created (probably not installed), replacing with link to Hub.");
            }
            
            // Check if the dashboard already exists (defined by the "externalId")
            const dashboardGet = await documentsClient.listDocuments({
              filter: "externalId == '" + EXTERNAL_ID + "'"
            });
            if(dashboardGet.documents.length == 0){
              dashboardCheck = false;
            }
            else {
              dashboardCheck = true;
            }

            // Raw dashboard JSON
            var dashboardJson = {
              "version": 15,
              "variables": [],
              "tiles": {
                  "0": {
                      "type": "markdown",
                      "title": "",
                      "content": "## 💻 Online order\n---\n💼 Business KPI = Average order value."
                  },
                  "1": {
                      "type": "markdown",
                      "title": "",
                      "content": "## ⚙️ Orders processed\n---\n💼 Business KPI = Time from receiving an order to picking it (90th percentile)."
                  },
                  "2": {
                      "type": "markdown",
                      "title": "",
                      "content": "## 🏭 Warehouse\n---\n💼 Business KPI = Percentage change in orders packed in the last hour vs. same time yesterday."
                  },
                  "3": {
                      "type": "markdown",
                      "title": "",
                      "content": "## 🚚 Shipping\n---\n💼 Business KPI = Order shipping success rate."
                  },
                  "4": {
                      "type": "markdown",
                      "title": "",
                      "content": "## 📦 Delivery\n---\n💼 Business KPI = Delivery time for \"Gold\" users."
                  },
                  "6": {
                      "type": "data",
                      "title": "",
                      "query": "// The two main ways to achieve this number are:\n// - Query Davis events and filter by the services/entities known to power this part of the journey.\n// - Using a topology lookup:\n//   - Get Biz Events related to this step.\n//   - \"Lookup\" the Spans using the trace ID.\n//   - Collect a \"Distinct\" list of the Services.\n//   - \"Lookup\" any Davis events related to those Services.\nfetch bizevents\n| fieldsAdd problemExample = 0\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "problemExample",
                                  "title": "Open Problems",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 1
                                      },
                                      {
                                          "id": 2,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 0
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "dt.entity.host",
                                  "valueAxis": "problemExample",
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "problemExample"
                              },
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "problemExample"
                                  ],
                                  "leftAxisDimensions": [
                                      "dt.entity.host"
                                  ]
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🛠️ IT ISSUES",
                              "prefixIcon": "",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": false
                              },
                              "colorThresholdTarget": "background",
                              "recordField": "problemExample"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "dt.entity.host",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "problemExample",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "11": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data of the average order value split by loyalty.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" and event.type == \"place.order\"\n| summarize `Number of bookings` = count(), by:{loyalty}",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "donutChart",
                      "visualizationSettings": {
                          "thresholds": [],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative",
                                  "showTotalValue": true,
                                  "hideLabels": false
                              },
                              "categoryOverrides": {
                                  "basic": {
                                      "color": "var(--dt-colors-charts-categorical-color-02-default, #2c2f3f)",
                                      "added": 1719589867351
                                  },
                                  "bronze": {
                                      "color": "var(--dt-colors-charts-categorical-color-10-default, #904523)",
                                      "added": 1719589872753
                                  },
                                  "gold": {
                                      "color": "var(--dt-colors-charts-categorical-color-06-default, #a9780f)",
                                      "added": 1719589878838
                                  },
                                  "silver": {
                                      "color": "var(--dt-colors-charts-categorical-color-05-default, #84859a)",
                                      "added": 1719589883851
                                  }
                              },
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "loyalty",
                                  "categoryAxisLabel": "loyalty",
                                  "valueAxis": "Number of bookings",
                                  "valueAxisLabel": "Number of bookings",
                                  "layout": "horizontal"
                              },
                              "legend": {
                                  "hidden": true
                              },
                              "colorPalette": "blue-steel",
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "",
                              "prefixIcon": "",
                              "autoscale": true,
                              "alignment": "center",
                              "recordField": "searchTerm"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "loyalty",
                                  "value": "Number of bookings"
                              },
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "Number of bookings",
                                      "rangeAxis": ""
                                  }
                              ]
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "Number of bookings",
                                  "unitCategory": "unspecified",
                                  "baseUnit": "none",
                                  "displayUnit": null,
                                  "decimals": 2,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1719589709341
                              }
                          ]
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "13": {
                      "type": "markdown",
                      "title": "",
                      "content": "Drilldown: [IT](" + environmentUrl + "/ui/apps/dynatrace.classic.problems/ui/problems) | [Security](" + environmentUrl + "/ui/apps/dynatrace.classic.vulnerabilities/ui/security/vulnerabilities) | [Carbon](" + environmentUrl + "/ui/apps/dynatrace.biz.carbon/) | [Business](https://www.dynatrace.com/company/dynatrace-for-executives/#02-business-analytics)"
                  },
                  "14": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data of the average order value.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" and event.type == \"place.order\"\n| makeTimeseries averageOrderValue = avg(order.value), bins:50",
                      "davis": {
                          "enabled": true,
                          "componentState": {
                              "selectedAnalyzerName": "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer",
                              "inputData": {
                                  "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer": {
                                      "generalParameters": {
                                          "timeframe": {
                                              "startTime": "2024-06-30T13:00:26.303Z",
                                              "endTime": "2024-07-01T13:00:26.303Z"
                                          },
                                          "resolveDimensionalQueryData": true,
                                          "logVerbosity": "INFO"
                                      },
                                      "numberOfSignalFluctuations": 1,
                                      "alertCondition": "OUTSIDE",
                                      "alertOnMissingData": false,
                                      "violatingSamples": 2,
                                      "slidingWindow": 5,
                                      "dealertingSamples": 5,
                                      "query": "// Real example from the data of the average order value.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" and event.type == \"place.order\"\n| makeTimeseries averageOrderValue = avg(order.value), bins:50"
                                  }
                              }
                          },
                          "davisVisualization": {
                              "isAvailable": true,
                              "settings": {
                                  "visibleSections": "VISUALIZATION"
                              }
                          }
                      },
                      "visualization": "davis",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "Top 5?",
                                  "title": "",
                                  "isEnabled": false,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                                          },
                                          "comparator": "≥",
                                          "label": ""
                                      },
                                      {
                                          "id": 1,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                                          },
                                          "comparator": "≥",
                                          "label": ""
                                      },
                                      {
                                          "id": 2,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 1
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "customer.id",
                                  "valueAxisLabel": "booking.value",
                                  "layout": "horizontal"
                              },
                              "legend": {
                                  "hidden": true
                              },
                              "fieldMapping": {
                                  "timestamp": "timeframe",
                                  "leftAxisValues": [
                                      "averageOrderValue"
                                  ],
                                  "leftAxisDimensions": []
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "",
                              "prefixIcon": "",
                              "autoscale": true,
                              "alignment": "center",
                              "recordField": "Search term"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {},
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "interval",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "15": {
                      "type": "markdown",
                      "title": "",
                      "content": "### Orders by loyalty tier\n---\nHow many unique bookings were made, and by what tier of user."
                  },
                  "16": {
                      "type": "markdown",
                      "title": "",
                      "content": "### Average order size\n---\nValue over time, Davis highlights where the value is higher or lower than expected."
                  },
                  "17": {
                      "type": "markdown",
                      "title": "",
                      "content": "### Time to pick items\n---\n90th percentile of time taken from receiving order to picking first item."
                  },
                  "18": {
                      "type": "data",
                      "title": "",
                      "query": "// The two main ways to achieve this number are:\n// - Query Security events and filter by the services/entities known to power this part of the journey.\n// - Using a topology lookup:\n//   - Get Biz Events related to this step.\n//   - \"Lookup\" the Spans using the trace ID.\n//   - Collect a \"Distinct\" list of the Services.\n//   - \"Lookup\" any Security events related to those Services.\nfetch bizevents\n| fieldsAdd securityExample = \"4/10\"\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "securityExample",
                                  "title": "Security score",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 1,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          },
                                          "comparator": "=",
                                          "label": "",
                                          "value": "4/10"
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "securityExample",
                                  "valueAxisLabel": "account.fee",
                                  "categoryAxis": "securityExample",
                                  "valueAxis": "account.fee"
                              },
                              "hiddenLegendFields": [],
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "account.fee"
                                  ],
                                  "leftAxisDimensions": [
                                      "securityExample"
                                  ]
                              }
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🔒 SECURITY",
                              "prefixIcon": "",
                              "autoscale": true,
                              "alignment": "center",
                              "colorThresholdTarget": "background",
                              "recordField": "securityExample"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "securityExample",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": []
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "22": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data, of the average time to start picking an order.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" \n| filter event.type == \"warehouse.received\" or event.type == \"item.picked\"\n| sort timestamp asc\n| fieldsAdd receiveTime = if(event.type == \"warehouse.received\", timestamp), pickTime = if(event.type == \"item.picked\", timestamp)\n| summarize firstReceive = takeFirst(receiveTime), firstPick = takeFirst(pickTime), by:{order.id}\n| filterOut isNull(firstReceive) or isNull(firstPick)\n| fieldsAdd timeToPick = firstPick - firstReceive\n| makeTimeseries ninetyTimeToPick = percentile(timeToPick, 90), time:firstPick, bins:50",
                      "davis": {
                          "enabled": false,
                          "componentState": {
                              "selectedAnalyzerName": "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer",
                              "inputData": {
                                  "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer": {
                                      "generalParameters": {
                                          "timeframe": {
                                              "startTime": "2024-06-27T14:11:35.440Z",
                                              "endTime": "2024-06-28T14:11:35.440Z"
                                          },
                                          "resolveDimensionalQueryData": true,
                                          "logVerbosity": "INFO"
                                      },
                                      "numberOfSignalFluctuations": 1,
                                      "alertCondition": "OUTSIDE",
                                      "alertOnMissingData": false,
                                      "violatingSamples": 3,
                                      "slidingWindow": 5,
                                      "dealertingSamples": 5,
                                      "query": "// Real example from the data, of the average time to start picking an order.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" \n| filter event.type == \"warehouse.received\" or event.type == \"item.picked\"\n| sort timestamp asc\n| fieldsAdd receiveTime = if(event.type == \"warehouse.received\", timestamp), pickTime = if(event.type == \"item.picked\", timestamp)\n| summarize firstReceive = takeFirst(receiveTime), firstPick = takeFirst(pickTime), by:{order.id}\n| filterOut isNull(firstReceive) or isNull(firstPick)\n| fieldsAdd timeToPick = firstPick - firstReceive\n| makeTimeseries ninetyTimeToPick = percentile(timeToPick, 90), time:firstPick, bins:50"
                                  }
                              }
                          },
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "lineChart",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "",
                                  "title": "",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                                          },
                                          "comparator": "≥",
                                          "label": ""
                                      },
                                      {
                                          "id": 1,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                                          },
                                          "comparator": "≥",
                                          "label": ""
                                      },
                                      {
                                          "id": 2,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                                          },
                                          "comparator": "≥",
                                          "label": ""
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "legend": {
                                  "hidden": true
                              },
                              "seriesOverrides": [
                                  {
                                      "seriesId": [
                                          "fail"
                                      ],
                                      "override": {
                                          "color": {
                                              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                                          }
                                      }
                                  },
                                  {
                                      "seriesId": [
                                          "pass"
                                      ],
                                      "override": {
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          }
                                      }
                                  },
                                  {
                                      "seriesId": [
                                          "failedLogins"
                                      ],
                                      "override": {
                                          "color": {
                                              "Default": "var(--dt-colors-charts-security-risk-level-critical-default, #8a0012)"
                                          }
                                      }
                                  },
                                  {
                                      "seriesId": [
                                          "successfulLogins"
                                      ],
                                      "override": {
                                          "color": {
                                              "Default": "var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)"
                                          }
                                      }
                                  }
                              ],
                              "colorPalette": "categorical",
                              "fieldMapping": {
                                  "timestamp": "timeframe",
                                  "leftAxisValues": [
                                      "ninetyTimeToPick"
                                  ],
                                  "leftAxisDimensions": []
                              },
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "event.type",
                                  "valueAxisLabel": "number"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": false,
                              "label": "",
                              "prefixIcon": "",
                              "autoscale": true,
                              "alignment": "center",
                              "recordField": "single"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {},
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "interval",
                                      "rangeAxis": ""
                                  }
                              ]
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "ninetyTimeToPick",
                                  "unitCategory": "time",
                                  "baseUnit": "nanosecond",
                                  "displayUnit": null,
                                  "decimals": 0,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1717151082207
                              }
                          ]
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "23": {
                      "type": "markdown",
                      "title": "",
                      "content": "### Average order items per city\n---\nAverage number of items in an order broken down by each location."
                  },
                  "24": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data of the number of items per order, per location. In this example we need to take data from a different event to get the order location.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" \n| filter event.type == \"warehouse.received\" or event.type == \"item.picked\"\n| summarize numberOfItems = countIf(event.type == \"item.picked\"), location = takeAny(location), by:{order.id}\n| summarize averageItems = toDouble(avg(numberOfItems)), by:{location}\n| filter location != \"\"\n| sort averageItems desc",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "categoricalBarChart",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "single",
                                  "title": "",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                                          },
                                          "comparator": "≥",
                                          "label": ""
                                      },
                                      {
                                          "id": 1,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                                          },
                                          "comparator": "≥",
                                          "label": ""
                                      },
                                      {
                                          "id": 2,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                                          },
                                          "comparator": "≥",
                                          "label": ""
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative",
                                  "showTotalValue": true
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "location",
                                  "valueAxisLabel": "averageItems",
                                  "categoryAxis": "location",
                                  "valueAxis": "averageItems",
                                  "layout": "horizontal"
                              },
                              "legend": {
                                  "hidden": true
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": false,
                              "label": "",
                              "prefixIcon": "",
                              "autoscale": true,
                              "alignment": "center",
                              "recordField": "single",
                              "trend": {
                                  "isInverseTrend": true
                              }
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "hexagon",
                              "dataMappings": {
                                  "category": "location",
                                  "value": "averageItems"
                              },
                              "legend": "right"
                          },
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "averageItems",
                                      "rangeAxis": ""
                                  }
                              ]
                          },
                          "unitsOverrides": []
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "25": {
                      "type": "data",
                      "title": "",
                      "query": "// This number obviously requires the Carbon app to be installed. An example way to calculate the footprint for part of the journey is:\n// - Fetch the Biz Events related to this part of the journey.\n// - Collect a \"Distinct\" list of the Hosts those Biz Events come from.\n// - \"Lookup\" the Carbon events related to those hosts.\n// - (Optional) If there's lots of shared infrastructure, you can go one step further and use the Process CPU to distribute Carbon to the specific Processes in use.\nfetch bizevents\n| fieldsAdd carbonExample = 452\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "carbonExample",
                                  "title": "Carbon footprint",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          },
                                          "comparator": "<",
                                          "label": "",
                                          "value": 1000
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "carbonExample"
                                  ],
                                  "leftAxisDimensions": [
                                      "dt.entity.host"
                                  ]
                              },
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "dt.entity.host",
                                  "valueAxis": "carbonExample",
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "carbonExample"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🌳 CARBON",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false,
                                  "showTicks": true
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": true,
                                  "isRelative": true,
                                  "isInverseTrend": true
                              },
                              "recordField": "carbonExample",
                              "colorThresholdTarget": "background"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "dt.entity.host",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "carbonExample",
                                  "unitCategory": "mass",
                                  "baseUnit": "kilogram",
                                  "displayUnit": "kilogram",
                                  "decimals": 0,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1703159936837
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "carbonExample",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "26": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data of the average order value.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" and event.type == \"place.order\"\n| summarize averageOrderValue = avg(order.value)",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "averageOrderValue",
                                  "title": "Average order value",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 2,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 500
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "customer.id",
                                  "valueAxisLabel": "test"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "💼 BUSINESS KPI",
                              "prefixIcon": "",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": false
                              },
                              "colorThresholdTarget": "background",
                              "recordField": "averageOrderValue"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {},
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "averageOrderValue",
                                      "rangeAxis": ""
                                  }
                              ]
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "averageOrderValue",
                                  "unitCategory": "currency",
                                  "baseUnit": "usd",
                                  "displayUnit": null,
                                  "decimals": 2,
                                  "suffix": "",
                                  "delimiter": true,
                                  "added": 1717148328781
                              }
                          ]
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "28": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data, of the average time to start picking an order.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" \n| filter event.type == \"warehouse.received\" or event.type == \"item.picked\"\n| sort timestamp asc\n| fieldsAdd receiveTime = if(event.type == \"warehouse.received\", timestamp), pickTime = if(event.type == \"item.picked\", timestamp)\n| summarize firstReceive = takeFirst(receiveTime), firstPick = takeFirst(pickTime), by:{order.id}\n| filterOut isNull(firstReceive) or isNull(firstPick)\n| fieldsAdd timeToPick = firstPick - firstReceive\n| summarize ninetyPercentile = percentile(timeToPick, 90)",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "ninetyPercentile",
                                  "title": "90th percentile time to pick",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 2,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          },
                                          "comparator": "<",
                                          "label": "",
                                          "value": 3600000000000
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "job.fee"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "💼 BUSINESS KPI",
                              "prefixIcon": "",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": false
                              },
                              "colorThresholdTarget": "background",
                              "recordField": "ninetyPercentile"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {},
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "ninetyPercentile",
                                  "unitCategory": "time",
                                  "baseUnit": "nanosecond",
                                  "displayUnit": null,
                                  "decimals": 0,
                                  "suffix": "",
                                  "delimiter": true,
                                  "added": 1703163062500
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "ninetyPercentile",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "31": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example of doing a lookup to compare against the number of orders packed last week, for the same hour.\nfetch bizevents, from: -1h\n| filter event.provider == \"" + eventProvider + "\" and event.type == \"order.packed\"\n| summarize ordersPackedNow = count(), by:{event.type}\n| lookup [fetch bizevents, from: -1d-1h, to:-1d | filter event.provider == \"" + eventProvider + "\" and event.type == \"order.packed\" | summarize ordersPackedLastWeek = count(), by:{event.type} ], sourceField:event.type, lookupField:event.type\n| fieldsAdd percentageChange = ((toDouble(lookup.ordersPackedLastWeek) - toDouble(ordersPackedNow)) / toDouble(ordersPackedNow)) * 100",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "percentageChange",
                                  "title": "Changes in orders being packed",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": -10
                                      },
                                      {
                                          "id": 1,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                                          },
                                          "comparator": "<",
                                          "label": "",
                                          "value": -10
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "event.type",
                                  "valueAxis": "ordersPackedNow",
                                  "categoryAxisLabel": "event.type",
                                  "valueAxisLabel": "ordersPackedNow"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "💼 BUSINESS KPI",
                              "prefixIcon": "",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": false
                              },
                              "recordField": "percentageChange",
                              "colorThresholdTarget": "background"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "event.type",
                                  "value": "ordersPackedNow"
                              },
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "percentageChange",
                                  "unitCategory": "percentage",
                                  "baseUnit": "percent",
                                  "displayUnit": null,
                                  "decimals": 2,
                                  "suffix": "",
                                  "delimiter": true,
                                  "added": 1703100953267
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "ordersPackedNow",
                                      "rangeAxis": ""
                                  },
                                  {
                                      "valueAxis": "lookup.ordersPackedLastWeek",
                                      "rangeAxis": ""
                                  },
                                  {
                                      "valueAxis": "percentageChange",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "32": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data of the number of successful vs failed shipments.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\"\n| filter startsWith(event.type, \"order.shipped\")\n| summarize success = countIf(event.type == \"order.shipped\"), fail = countIf(event.type == \"order.shipped.system.outage\")\n| fieldsAdd shippingSuccessRate = (toDouble(success)/(toDouble(success)+toDouble(fail))) * 100",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "shippingSuccessRate",
                                  "title": "Shipping success rate",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 5
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "customer.id",
                                  "valueAxisLabel": "test"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "💼 BUSINESS KPI",
                              "prefixIcon": "",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": false
                              },
                              "colorThresholdTarget": "background",
                              "recordField": "shippingSuccessRate"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {},
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "shippingSuccessRate",
                                  "unitCategory": "percentage",
                                  "baseUnit": "percent",
                                  "displayUnit": null,
                                  "decimals": 2,
                                  "suffix": "",
                                  "delimiter": true,
                                  "added": 1703160585115
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "success",
                                      "rangeAxis": ""
                                  },
                                  {
                                      "valueAxis": "fail",
                                      "rangeAxis": ""
                                  },
                                  {
                                      "valueAxis": "shippingSuccessRate",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "33": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data of number of orders packed, per hour.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" and event.type == \"order.packed\"\n| makeTimeseries ordersPacked = count(), interval:1h",
                      "davis": {
                          "enabled": false,
                          "componentState": {
                              "selectedAnalyzerName": "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer",
                              "inputData": {
                                  "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer": {
                                      "generalParameters": {
                                          "timeframe": {
                                              "startTime": "2024-06-27T14:11:35.440Z",
                                              "endTime": "2024-06-28T14:11:35.440Z"
                                          },
                                          "resolveDimensionalQueryData": true,
                                          "logVerbosity": "INFO"
                                      },
                                      "numberOfSignalFluctuations": 1,
                                      "alertCondition": "OUTSIDE",
                                      "alertOnMissingData": false,
                                      "violatingSamples": 4,
                                      "slidingWindow": 5,
                                      "dealertingSamples": 5,
                                      "query": "fetch bizevents\n| filter event.provider == \"" + eventProvider + "\" and event.type == \"order.packed\"\n| makeTimeseries ordersPacked = count(), interval:1h"
                                  }
                              }
                          },
                          "davisVisualization": {
                              "isAvailable": true,
                              "settings": {
                                  "visibleSections": "VISUALIZATION"
                              }
                          }
                      },
                      "visualization": "barChart",
                      "visualizationSettings": {
                          "thresholds": [],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "legend": {
                                  "hidden": true
                              },
                              "seriesOverrides": [
                                  {
                                      "seriesId": [
                                          "sparkline"
                                      ],
                                      "override": {
                                          "color": {
                                              "Default": "var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)"
                                          }
                                      }
                                  }
                              ],
                              "fieldMapping": {
                                  "timestamp": "timeframe",
                                  "leftAxisValues": [
                                      "ordersPacked"
                                  ],
                                  "leftAxisDimensions": []
                              },
                              "categoricalBarChartSettings": {},
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "Success rate",
                              "prefixIcon": "",
                              "recordField": "singlevalue",
                              "autoscale": true,
                              "alignment": "center",
                              "trend": {
                                  "isRelative": true
                              },
                              "sparklineSettings": {
                                  "variant": "area",
                                  "showTicks": true
                              }
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {},
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "singlevalue",
                                  "unitCategory": "percentage",
                                  "baseUnit": "percent",
                                  "displayUnit": null,
                                  "decimals": 2,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1703100359149
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "interval",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "34": {
                      "type": "markdown",
                      "title": "",
                      "content": "### Orders packed per hour\n---\nNumber of orders being packed, broken down hourly."
                  },
                  "35": {
                      "type": "markdown",
                      "title": "",
                      "content": "### Shipping success rate\n---\nTrend of when orders are shipped successfully (🟢) or have issues (🔴)."
                  },
                  "36": {
                      "type": "markdown",
                      "title": "",
                      "content": "### Vouchers offered\n---\nTotal worth of vouchers offered for shipping errors (10% of order value over $1000.)"
                  },
                  "37": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data of successful vs failed shippings.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\"\n| filter startsWith(event.type, \"order.shipped\")\n| makeTimeseries success = countIf(event.type == \"order.shipped\"), fail = countIf(event.type == \"order.shipped.system.outage\"), bins:40",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "barChart",
                      "visualizationSettings": {
                          "thresholds": [],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "legend": {
                                  "hidden": true
                              },
                              "seriesOverrides": [
                                  {
                                      "seriesId": [
                                          "fail"
                                      ],
                                      "override": {
                                          "color": {
                                              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                                          }
                                      }
                                  },
                                  {
                                      "seriesId": [
                                          "success"
                                      ],
                                      "override": {
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
                                          }
                                      }
                                  }
                              ],
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "customer.id",
                                  "valueAxisLabel": "booking.value"
                              },
                              "fieldMapping": {
                                  "timestamp": "timeframe",
                                  "leftAxisValues": [
                                      "success",
                                      "fail"
                                  ],
                                  "leftAxisDimensions": []
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "Success rate",
                              "prefixIcon": "",
                              "recordField": "singlevalue",
                              "autoscale": true,
                              "alignment": "center",
                              "trend": {
                                  "isRelative": true
                              },
                              "sparklineSettings": {
                                  "variant": "area",
                                  "showTicks": true
                              }
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {},
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "singlevalue",
                                  "unitCategory": "percentage",
                                  "baseUnit": "percent",
                                  "displayUnit": null,
                                  "decimals": 2,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1703100359149
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "interval",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "39": {
                      "type": "markdown",
                      "title": "",
                      "content": "### Probable lost orders\n---\nOrders which started picking more than 2 hours ago and have not been packed."
                  },
                  "40": {
                      "type": "markdown",
                      "title": "",
                      "content": "### Gold loyalty delivery time\n---\nAverage delivery time for \"Gold\" loyalty members, over time."
                  },
                  "41": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data looking at the time between shipping and order being received, for \"Gold\" members.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" \n| filter event.type == \"order.shipped\" or event.type == \"order.received\" or event.type == \"place.order\"\n| sort timestamp asc\n| fieldsAdd shippedTimestamp = if(event.type == \"order.shipped\", timestamp), receivedTimestamp = if(event.type == \"order.received\", timestamp)\n| summarize shippedTime = takeMin(shippedTimestamp), receivedTime = takeMin(receivedTimestamp), loyalty = takeAny(loyalty), by:{order.id}\n| filterOut isNull(receivedTime) or isNull(shippedTime)\n| filter loyalty == \"gold\"\n| fieldsAdd deliveryTime = receivedTime - shippedTime\n| makeTimeseries avgDeliveryTime = avg(deliveryTime), time:receivedTime",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "lineChart",
                      "visualizationSettings": {
                          "thresholds": [],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {
                                  "platinum": {
                                      "color": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)",
                                      "added": 1717152716585
                                  },
                                  "sapphire": {
                                      "color": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)",
                                      "added": 1717152727709
                                  },
                                  "pearl": {
                                      "color": "var(--dt-colors-charts-categorical-color-02-default, #2c2f3f)",
                                      "added": 1717152738998
                                  }
                              },
                              "legend": {
                                  "hidden": true
                              },
                              "seriesOverrides": [
                                  {
                                      "seriesId": [
                                          "sparkline"
                                      ],
                                      "override": {
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-color-08-default, #8b6ecf)"
                                          }
                                      }
                                  }
                              ],
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "mgm.rewards",
                                  "valueAxisLabel": "count()"
                              },
                              "fieldMapping": {
                                  "timestamp": "timeframe",
                                  "leftAxisValues": [
                                      "avgDeliveryTime"
                                  ],
                                  "leftAxisDimensions": []
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "Success rate",
                              "prefixIcon": "",
                              "recordField": "singlevalue",
                              "autoscale": true,
                              "alignment": "center",
                              "trend": {
                                  "isRelative": true
                              },
                              "sparklineSettings": {
                                  "variant": "area",
                                  "showTicks": true
                              }
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {},
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "avgDeliveryTime",
                                  "unitCategory": "time",
                                  "baseUnit": "nanosecond",
                                  "displayUnit": null,
                                  "decimals": 0,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1703100359149
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "interval",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "42": {
                      "type": "markdown",
                      "title": "",
                      "content": "### End-to-end order time\n---\nTotal time from place order to order received, by loyalty."
                  },
                  "45": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data looking at the time between shipping and order being received, for \"Gold\" members.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" \n| filter event.type == \"order.shipped\" or event.type == \"order.received\" or event.type == \"place.order\"\n| sort timestamp asc\n| fieldsAdd shippedTimestamp = if(event.type == \"order.shipped\", timestamp), receivedTimestamp = if(event.type == \"order.received\", timestamp)\n| summarize shippedTime = takeMin(shippedTimestamp), receivedTime = takeMin(receivedTimestamp), loyalty = takeAny(loyalty), by:{order.id}\n| filterOut isNull(receivedTime) or isNull(shippedTime)\n| filter loyalty == \"gold\"\n| fieldsAdd deliveryTime = receivedTime - shippedTime\n| summarize avgDeliveryTime = avg(deliveryTime)",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "avgDeliveryTime",
                                  "title": "",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 2,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)"
                                          },
                                          "comparator": "<",
                                          "label": "",
                                          "value": 5400000000000
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "test"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "💼 BUSINESS KPI",
                              "prefixIcon": "",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": false
                              },
                              "recordField": "avgDeliveryTime",
                              "colorThresholdTarget": "background"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {},
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "singevalue",
                                  "unitCategory": "time",
                                  "baseUnit": "minute",
                                  "displayUnit": null,
                                  "decimals": 2,
                                  "suffix": "",
                                  "delimiter": true,
                                  "added": 1703262264498
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "avgDeliveryTime",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "49": {
                      "type": "data",
                      "title": "",
                      "query": "fetch bizevents\n| filter event.provider == \"" + eventProvider + "\"\n| filter event.type == \"order.packed\" or event.type == \"item.picked\"\n| summarize pickedCount = countIf(event.type == \"item.picked\"), packedCount = countIf(event.type == \"order.packed\"), firstPickTime = takeFirst(timestamp), by:{order.id}\n| fieldsAdd timeSinceFirstPick = (now() - firstPickTime)\n| filter packedCount == 0 and timeSinceFirstPick > toDuration(7200000000000)\n| makeTimeseries `Probably lost orders` = count(), time:firstPickTime, bins:50\n| fieldsAdd totalLostOrders = arraySum(`Probably lost orders`)",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {
                                  "sapphire": {
                                      "color": "var(--dt-colors-charts-categorical-color-01-default, #134fc9)",
                                      "added": 1717151655357
                                  },
                                  "gold": {
                                      "color": "var(--dt-colors-charts-categorical-color-06-default, #a9780f)",
                                      "added": 1717151659952
                                  },
                                  "noir": {
                                      "color": "var(--dt-colors-charts-loglevel-none-default, #2c2f3f)",
                                      "added": 1717151665036
                                  },
                                  "pearl": {
                                      "color": "var(--dt-colors-charts-categorical-color-02-default, #2c2f3f)",
                                      "added": 1717151669712
                                  },
                                  "platinum": {
                                      "color": "var(--dt-colors-charts-categorical-color-07-default, #438fb1)",
                                      "added": 1717151677352
                                  }
                              },
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "order.id",
                                  "valueAxisLabel": "pickedCount",
                                  "layout": "horizontal"
                              },
                              "hiddenLegendFields": [],
                              "legend": {
                                  "hidden": true
                              },
                              "fieldMapping": {
                                  "timestamp": "timeframe",
                                  "leftAxisValues": [
                                      "Probably lost orders"
                                  ],
                                  "leftAxisDimensions": [
                                      "totalLostOrders"
                                  ]
                              }
                          },
                          "singleValue": {
                              "showLabel": false,
                              "label": "",
                              "prefixIcon": "MailClosedIcon",
                              "recordField": "totalLostOrders",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "showTicks": true
                              },
                              "alignment": "center",
                              "trend": {
                                  "isInverseTrend": true
                              }
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {},
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "singlevalue",
                                  "unitCategory": "time",
                                  "baseUnit": "second",
                                  "displayUnit": null,
                                  "decimals": 0,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1703177374563
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "interval",
                                      "rangeAxis": ""
                                  },
                                  {
                                      "valueAxis": "totalLostOrders",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "51": {
                      "type": "markdown",
                      "title": "",
                      "content": " "
                  },
                  "53": {
                      "type": "markdown",
                      "title": "",
                      "content": "Drilldown: [IT](" + environmentUrl + "/ui/apps/dynatrace.classic.problems/ui/problems) | [Security](" + environmentUrl + "/ui/apps/dynatrace.classic.vulnerabilities/ui/security/vulnerabilities) | [Carbon](" + environmentUrl + "/ui/apps/dynatrace.biz.carbon/) | [Business](https://www.dynatrace.com/company/dynatrace-for-executives/#02-business-analytics)"
                  },
                  "54": {
                      "type": "markdown",
                      "title": "",
                      "content": "Drilldown: [IT](" + environmentUrl + "/ui/apps/dynatrace.classic.problems/ui/problems) | [Security](" + environmentUrl + "/ui/apps/dynatrace.classic.vulnerabilities/ui/security/vulnerabilities) | [Carbon](" + environmentUrl + "/ui/apps/dynatrace.biz.carbon/) | [Business](" + bizFlowUrl + ")"
                  },
                  "55": {
                      "type": "markdown",
                      "title": "",
                      "content": "Drilldown: [IT](" + environmentUrl + "/ui/apps/dynatrace.classic.problems/ui/problems) | [Security](" + environmentUrl + "/ui/apps/dynatrace.classic.vulnerabilities/ui/security/vulnerabilities) | [Carbon](" + environmentUrl + "/ui/apps/dynatrace.biz.carbon/) | [Business](https://www.dynatrace.com/company/dynatrace-for-executives/#02-business-analytics)"
                  },
                  "56": {
                      "type": "markdown",
                      "title": "",
                      "content": "Drilldown: [IT](" + environmentUrl + "/ui/apps/dynatrace.classic.problems/ui/problems) | [Security](" + environmentUrl + "/ui/apps/dynatrace.classic.vulnerabilities/ui/security/vulnerabilities) | [Carbon](" + environmentUrl + "/ui/apps/dynatrace.biz.carbon/) | [Business](https://www.dynatrace.com/company/dynatrace-for-executives/#02-business-analytics)"
                  },
                  "66": {
                      "type": "data",
                      "title": "",
                      "query": "// The two main ways to achieve this number are:\n// - Query Davis events and filter by the services/entities known to power this part of the journey.\n// - Using a topology lookup:\n//   - Get Biz Events related to this step.\n//   - \"Lookup\" the Spans using the trace ID.\n//   - Collect a \"Distinct\" list of the Services.\n//   - \"Lookup\" any Davis events related to those Services.\nfetch bizevents\n| fieldsAdd problemExample = 0\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "problemExample",
                                  "title": "Open Problems",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 1
                                      },
                                      {
                                          "id": 2,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 0
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "dt.entity.host",
                                  "valueAxis": "problemExample",
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "problemExample"
                              },
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "problemExample"
                                  ],
                                  "leftAxisDimensions": [
                                      "dt.entity.host"
                                  ]
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🛠️ IT ISSUES",
                              "prefixIcon": "",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": false
                              },
                              "colorThresholdTarget": "background",
                              "recordField": "problemExample"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "dt.entity.host",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "problemExample",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "67": {
                      "type": "data",
                      "title": "",
                      "query": "// The two main ways to achieve this number are:\n// - Query Davis events and filter by the services/entities known to power this part of the journey.\n// - Using a topology lookup:\n//   - Get Biz Events related to this step.\n//   - \"Lookup\" the Spans using the trace ID.\n//   - Collect a \"Distinct\" list of the Services.\n//   - \"Lookup\" any Davis events related to those Services.\nfetch bizevents\n| fieldsAdd problemExample = 0\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "problemExample",
                                  "title": "Open Problems",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 1
                                      },
                                      {
                                          "id": 2,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 0
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "dt.entity.host",
                                  "valueAxis": "problemExample",
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "problemExample"
                              },
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "problemExample"
                                  ],
                                  "leftAxisDimensions": [
                                      "dt.entity.host"
                                  ]
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🛠️ IT ISSUES",
                              "prefixIcon": "",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": false
                              },
                              "colorThresholdTarget": "background",
                              "recordField": "problemExample"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "dt.entity.host",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "problemExample",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "68": {
                      "type": "data",
                      "title": "",
                      "query": "// The two main ways to achieve this number are:\n// - Query Davis events and filter by the services/entities known to power this part of the journey.\n// - Using a topology lookup:\n//   - Get Biz Events related to this step.\n//   - \"Lookup\" the Spans using the trace ID.\n//   - Collect a \"Distinct\" list of the Services.\n//   - \"Lookup\" any Davis events related to those Services.\nfetch bizevents\n| fieldsAdd problemExample = 0\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "problemExample",
                                  "title": "Open Problems",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 1
                                      },
                                      {
                                          "id": 2,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 0
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "dt.entity.host",
                                  "valueAxis": "problemExample",
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "problemExample"
                              },
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "problemExample"
                                  ],
                                  "leftAxisDimensions": [
                                      "dt.entity.host"
                                  ]
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🛠️ IT ISSUES",
                              "prefixIcon": "",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": false
                              },
                              "colorThresholdTarget": "background",
                              "recordField": "problemExample"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "dt.entity.host",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "problemExample",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "69": {
                      "type": "data",
                      "title": "",
                      "query": "// The two main ways to achieve this number are:\n// - Query Davis events and filter by the services/entities known to power this part of the journey.\n// - Using a topology lookup:\n//   - Get Biz Events related to this step.\n//   - \"Lookup\" the Spans using the trace ID.\n//   - Collect a \"Distinct\" list of the Services.\n//   - \"Lookup\" any Davis events related to those Services.\nfetch bizevents\n| fieldsAdd problemExample = 0\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "problemExample",
                                  "title": "Open Problems",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 1
                                      },
                                      {
                                          "id": 2,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)"
                                          },
                                          "comparator": "≥",
                                          "label": "",
                                          "value": 0
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "dt.entity.host",
                                  "valueAxis": "problemExample",
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "problemExample"
                              },
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "problemExample"
                                  ],
                                  "leftAxisDimensions": [
                                      "dt.entity.host"
                                  ]
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🛠️ IT ISSUES",
                              "prefixIcon": "",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": false
                              },
                              "colorThresholdTarget": "background",
                              "recordField": "problemExample"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "dt.entity.host",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "problemExample",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "70": {
                      "type": "data",
                      "title": "",
                      "query": "// The two main ways to achieve this number are:\n// - Query Security events and filter by the services/entities known to power this part of the journey.\n// - Using a topology lookup:\n//   - Get Biz Events related to this step.\n//   - \"Lookup\" the Spans using the trace ID.\n//   - Collect a \"Distinct\" list of the Services.\n//   - \"Lookup\" any Security events related to those Services.\nfetch bizevents\n| fieldsAdd securityExample = \"3/10\"\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "securityExample",
                                  "title": "Security score",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 1,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          },
                                          "comparator": "=",
                                          "label": "",
                                          "value": "3/10"
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "securityExample",
                                  "valueAxisLabel": "job.fee"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🔒 SECURITY",
                              "prefixIcon": "",
                              "autoscale": true,
                              "alignment": "center",
                              "colorThresholdTarget": "background",
                              "recordField": "securityExample"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "securityExample",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": []
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "71": {
                      "type": "data",
                      "title": "",
                      "query": "// The two main ways to achieve this number are:\n// - Query Security events and filter by the services/entities known to power this part of the journey.\n// - Using a topology lookup:\n//   - Get Biz Events related to this step.\n//   - \"Lookup\" the Spans using the trace ID.\n//   - Collect a \"Distinct\" list of the Services.\n//   - \"Lookup\" any Security events related to those Services.\nfetch bizevents\n| fieldsAdd securityExample = \"5/10\"\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "securityExample",
                                  "title": "Security score",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 1,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          },
                                          "comparator": "=",
                                          "label": "",
                                          "value": "5/10"
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "securityExample",
                                  "valueAxis": "booking.value",
                                  "categoryAxisLabel": "securityExample",
                                  "valueAxisLabel": "booking.value"
                              },
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "booking.value"
                                  ],
                                  "leftAxisDimensions": [
                                      "securityExample"
                                  ]
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🔒 SECURITY",
                              "prefixIcon": "",
                              "autoscale": true,
                              "alignment": "center",
                              "colorThresholdTarget": "background",
                              "recordField": "securityExample"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "securityExample",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": []
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "72": {
                      "type": "data",
                      "title": "",
                      "query": "// The two main ways to achieve this number are:\n// - Query Security events and filter by the services/entities known to power this part of the journey.\n// - Using a topology lookup:\n//   - Get Biz Events related to this step.\n//   - \"Lookup\" the Spans using the trace ID.\n//   - Collect a \"Distinct\" list of the Services.\n//   - \"Lookup\" any Security events related to those Services.\nfetch bizevents\n| fieldsAdd securityExample = \"4/10\"\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "securityExample",
                                  "title": "Security score",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 1,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          },
                                          "comparator": "=",
                                          "label": "",
                                          "value": "4/10"
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "securityExample",
                                  "valueAxisLabel": "account.fee",
                                  "categoryAxis": "securityExample",
                                  "valueAxis": "account.fee"
                              },
                              "hiddenLegendFields": [],
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "account.fee"
                                  ],
                                  "leftAxisDimensions": [
                                      "securityExample"
                                  ]
                              }
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🔒 SECURITY",
                              "prefixIcon": "",
                              "autoscale": true,
                              "alignment": "center",
                              "colorThresholdTarget": "background",
                              "recordField": "securityExample"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "securityExample",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": []
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "73": {
                      "type": "data",
                      "title": "",
                      "query": "// The two main ways to achieve this number are:\n// - Query Security events and filter by the services/entities known to power this part of the journey.\n// - Using a topology lookup:\n//   - Get Biz Events related to this step.\n//   - \"Lookup\" the Spans using the trace ID.\n//   - Collect a \"Distinct\" list of the Services.\n//   - \"Lookup\" any Security events related to those Services.\nfetch bizevents\n| fieldsAdd securityExample = \"2/10\"\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "securityExample",
                                  "title": "Security score",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 1,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          },
                                          "comparator": "=",
                                          "label": "",
                                          "value": "2/10"
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "securityExample",
                                  "valueAxis": "booking.value",
                                  "categoryAxisLabel": "securityExample",
                                  "valueAxisLabel": "booking.value"
                              },
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "booking.value"
                                  ],
                                  "leftAxisDimensions": [
                                      "securityExample"
                                  ]
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🔒 SECURITY",
                              "prefixIcon": "",
                              "autoscale": true,
                              "alignment": "center",
                              "colorThresholdTarget": "background",
                              "recordField": "securityExample"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "securityExample",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "histogram": {
                              "dataMappings": []
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "74": {
                      "type": "data",
                      "title": "",
                      "query": "// This number obviously requires the Carbon app to be installed. An example way to calculate the footprint for part of the journey is:\n// - Fetch the Biz Events related to this part of the journey.\n// - Collect a \"Distinct\" list of the Hosts those Biz Events come from.\n// - \"Lookup\" the Carbon events related to those hosts.\n// - (Optional) If there's lots of shared infrastructure, you can go one step further and use the Process CPU to distribute Carbon to the specific Processes in use.\nfetch bizevents\n| fieldsAdd carbonExample = 105\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "carbonExample",
                                  "title": "Carbon footprint",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          },
                                          "comparator": "<",
                                          "label": "",
                                          "value": 1000
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "carbonExample"
                                  ],
                                  "leftAxisDimensions": [
                                      "dt.entity.host"
                                  ]
                              },
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "dt.entity.host",
                                  "valueAxis": "carbonExample",
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "carbonExample"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🌳 CARBON",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false,
                                  "showTicks": true
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": true,
                                  "isRelative": true,
                                  "isInverseTrend": true
                              },
                              "recordField": "carbonExample",
                              "colorThresholdTarget": "background"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "dt.entity.host",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "carbonExample",
                                  "unitCategory": "mass",
                                  "baseUnit": "kilogram",
                                  "displayUnit": "kilogram",
                                  "decimals": 0,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1703159936837
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "carbonExample",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "75": {
                      "type": "data",
                      "title": "",
                      "query": "// This number obviously requires the Carbon app to be installed. An example way to calculate the footprint for part of the journey is:\n// - Fetch the Biz Events related to this part of the journey.\n// - Collect a \"Distinct\" list of the Hosts those Biz Events come from.\n// - \"Lookup\" the Carbon events related to those hosts.\n// - (Optional) If there's lots of shared infrastructure, you can go one step further and use the Process CPU to distribute Carbon to the specific Processes in use.\nfetch bizevents\n| fieldsAdd carbonExample = 587\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "carbonExample",
                                  "title": "Carbon footprint",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          },
                                          "comparator": "<",
                                          "label": "",
                                          "value": 1000
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "carbonExample"
                                  ],
                                  "leftAxisDimensions": [
                                      "dt.entity.host"
                                  ]
                              },
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "dt.entity.host",
                                  "valueAxis": "carbonExample",
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "carbonExample"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🌳 CARBON",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false,
                                  "showTicks": true
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": true,
                                  "isRelative": true,
                                  "isInverseTrend": true
                              },
                              "recordField": "carbonExample",
                              "colorThresholdTarget": "background"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "dt.entity.host",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "carbonExample",
                                  "unitCategory": "mass",
                                  "baseUnit": "kilogram",
                                  "displayUnit": "kilogram",
                                  "decimals": 0,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1703159936837
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "carbonExample",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "76": {
                      "type": "data",
                      "title": "",
                      "query": "// This number obviously requires the Carbon app to be installed. An example way to calculate the footprint for part of the journey is:\n// - Fetch the Biz Events related to this part of the journey.\n// - Collect a \"Distinct\" list of the Hosts those Biz Events come from.\n// - \"Lookup\" the Carbon events related to those hosts.\n// - (Optional) If there's lots of shared infrastructure, you can go one step further and use the Process CPU to distribute Carbon to the specific Processes in use.\nfetch bizevents\n| fieldsAdd carbonExample = 98\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "carbonExample",
                                  "title": "Carbon footprint",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          },
                                          "comparator": "<",
                                          "label": "",
                                          "value": 1000
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "carbonExample"
                                  ],
                                  "leftAxisDimensions": [
                                      "dt.entity.host"
                                  ]
                              },
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "dt.entity.host",
                                  "valueAxis": "carbonExample",
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "carbonExample"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🌳 CARBON",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false,
                                  "showTicks": true
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": true,
                                  "isRelative": true,
                                  "isInverseTrend": true
                              },
                              "recordField": "carbonExample",
                              "colorThresholdTarget": "background"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "dt.entity.host",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "carbonExample",
                                  "unitCategory": "mass",
                                  "baseUnit": "kilogram",
                                  "displayUnit": "kilogram",
                                  "decimals": 0,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1703159936837
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "carbonExample",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "77": {
                      "type": "data",
                      "title": "",
                      "query": "// This number obviously requires the Carbon app to be installed. An example way to calculate the footprint for part of the journey is:\n// - Fetch the Biz Events related to this part of the journey.\n// - Collect a \"Distinct\" list of the Hosts those Biz Events come from.\n// - \"Lookup\" the Carbon events related to those hosts.\n// - (Optional) If there's lots of shared infrastructure, you can go one step further and use the Process CPU to distribute Carbon to the specific Processes in use.\nfetch bizevents\n| fieldsAdd carbonExample = 56\n| limit 1",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [
                              {
                                  "id": 1,
                                  "field": "carbonExample",
                                  "title": "Carbon footprint",
                                  "isEnabled": true,
                                  "rules": [
                                      {
                                          "id": 0,
                                          "color": {
                                              "Default": "var(--dt-colors-charts-apdex-excellent-default, #2a7453)"
                                          },
                                          "comparator": "<",
                                          "label": "",
                                          "value": 1000
                                      }
                                  ]
                              }
                          ],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {},
                              "fieldMapping": {
                                  "timestamp": "timestamp",
                                  "leftAxisValues": [
                                      "carbonExample"
                                  ],
                                  "leftAxisDimensions": [
                                      "dt.entity.host"
                                  ]
                              },
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "dt.entity.host",
                                  "valueAxis": "carbonExample",
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "carbonExample"
                              },
                              "hiddenLegendFields": []
                          },
                          "singleValue": {
                              "showLabel": true,
                              "label": "🌳 CARBON",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "isVisible": false,
                                  "showTicks": true
                              },
                              "alignment": "center",
                              "trend": {
                                  "isVisible": true,
                                  "isRelative": true,
                                  "isInverseTrend": true
                              },
                              "recordField": "carbonExample",
                              "colorThresholdTarget": "background"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "dt.entity.host",
                                  "value": "timestamp"
                              },
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "carbonExample",
                                  "unitCategory": "mass",
                                  "baseUnit": "kilogram",
                                  "displayUnit": "kilogram",
                                  "decimals": 0,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1703159936837
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "carbonExample",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "78": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data looking at the time between shipping and order being received, for \"Gold\" members.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\" \n| filter event.type == \"order.shipped\" or event.type == \"order.received\" or event.type == \"place.order\"\n| sort timestamp asc\n| fieldsAdd placeOrderTimestamp = if(event.type == \"place.order\", timestamp), receivedTimestamp = if(event.type == \"order.received\", timestamp)\n| summarize placeOrderTime = takeMin(placeOrderTimestamp), receivedTime = takeMin(receivedTimestamp), loyalty = takeAny(loyalty), by:{order.id}\n| filterOut isNull(receivedTime) or isNull(placeOrderTime)\n| fieldsAdd totalTime = receivedTime - placeOrderTime\n| summarize `End-to-end order time` = avg(totalTime), by:{loyalty}",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "categoricalBarChart",
                      "visualizationSettings": {
                          "thresholds": [],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {
                                  "basic": {
                                      "color": "var(--dt-colors-charts-categorical-color-02-default, #2c2f3f)",
                                      "added": 1719832423731
                                  },
                                  "bronze": {
                                      "color": "var(--dt-colors-charts-categorical-color-10-default, #904523)",
                                      "added": 1719832425880
                                  },
                                  "gold": {
                                      "color": "var(--dt-colors-charts-categorical-color-06-default, #a9780f)",
                                      "added": 1719832427185
                                  },
                                  "silver": {
                                      "color": "var(--dt-colors-charts-categorical-color-05-default, #84859a)",
                                      "added": 1719832429081
                                  }
                              },
                              "categoricalBarChartSettings": {
                                  "categoryAxis": "loyalty",
                                  "valueAxis": "End-to-end order time",
                                  "categoryAxisLabel": "loyalty",
                                  "valueAxisLabel": "End-to-end order time",
                                  "layout": "vertical"
                              },
                              "hiddenLegendFields": [],
                              "legend": {
                                  "hidden": true
                              }
                          },
                          "singleValue": {
                              "showLabel": false,
                              "label": "",
                              "prefixIcon": "",
                              "recordField": "test",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "showTicks": true
                              },
                              "alignment": "center"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {
                                  "category": "loyalty",
                                  "value": "loyalty"
                              },
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "singlevalue",
                                  "unitCategory": "time",
                                  "baseUnit": "second",
                                  "displayUnit": null,
                                  "decimals": 0,
                                  "suffix": "",
                                  "delimiter": false,
                                  "added": 1703177374563
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "End-to-end order time",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  },
                  "79": {
                      "type": "data",
                      "title": "",
                      "query": "// Real example from the data of value of \"vouchers\" sent to people with shipping errors - which is 10% of order value over $1000.\nfetch bizevents\n| filter event.provider == \"" + eventProvider + "\"\n| filter event.type == \"order.shipped.system.outage\" or event.type == \"place.order\"\n| fieldsAdd placeOrderTime = if(event.type == \"place.order\", timestamp), shippingErrorTime = if(event.type == \"order.shipped.system.outage\", timestamp)\n| summarize placeOrderTime = takeFirst(placeOrderTime), shippingErrorTime = takeFirst(shippingErrorTime), order.value = takeMax(order.value), by:{order.id}\n| filter isNotNull(placeOrderTime) and isNotNull(shippingErrorTime) and order.value > 1000\n| fieldsAdd order.value = order.value * 0.10\n| summarize totalVoucherOffer = sum(order.value)",
                      "davis": {
                          "enabled": false,
                          "davisVisualization": {
                              "isAvailable": true
                          }
                      },
                      "visualization": "singleValue",
                      "visualizationSettings": {
                          "thresholds": [],
                          "chartSettings": {
                              "gapPolicy": "connect",
                              "circleChartSettings": {
                                  "groupingThresholdType": "relative",
                                  "groupingThresholdValue": 0,
                                  "valueType": "relative"
                              },
                              "categoryOverrides": {
                                  "sapphire": {
                                      "color": "var(--dt-colors-charts-categorical-color-01-default, #134fc9)",
                                      "added": 1717151655357
                                  },
                                  "gold": {
                                      "color": "var(--dt-colors-charts-categorical-color-06-default, #a9780f)",
                                      "added": 1717151659952
                                  },
                                  "noir": {
                                      "color": "var(--dt-colors-charts-loglevel-none-default, #2c2f3f)",
                                      "added": 1717151665036
                                  },
                                  "pearl": {
                                      "color": "var(--dt-colors-charts-categorical-color-02-default, #2c2f3f)",
                                      "added": 1717151669712
                                  },
                                  "platinum": {
                                      "color": "var(--dt-colors-charts-categorical-color-07-default, #438fb1)",
                                      "added": 1717151677352
                                  }
                              },
                              "categoricalBarChartSettings": {
                                  "categoryAxisLabel": "dt.entity.host",
                                  "valueAxisLabel": "test",
                                  "layout": "horizontal"
                              },
                              "hiddenLegendFields": [],
                              "legend": {
                                  "hidden": true
                              }
                          },
                          "singleValue": {
                              "showLabel": false,
                              "label": "",
                              "prefixIcon": "MoneyIcon",
                              "recordField": "totalVoucherOffer",
                              "autoscale": true,
                              "sparklineSettings": {
                                  "showTicks": true
                              },
                              "alignment": "center"
                          },
                          "table": {
                              "rowDensity": "condensed",
                              "enableSparklines": false,
                              "hiddenColumns": [],
                              "lineWrapIds": [],
                              "columnWidths": {}
                          },
                          "honeycomb": {
                              "shape": "square",
                              "dataMappings": {},
                              "legend": "auto"
                          },
                          "unitsOverrides": [
                              {
                                  "identifier": "totalVoucherOffer",
                                  "unitCategory": "currency",
                                  "baseUnit": "usd",
                                  "displayUnit": null,
                                  "decimals": 0,
                                  "suffix": "$",
                                  "delimiter": true,
                                  "added": 1703177374563
                              }
                          ],
                          "histogram": {
                              "dataMappings": [
                                  {
                                      "valueAxis": "totalVoucherOffer",
                                      "rangeAxis": ""
                                  }
                              ]
                          }
                      },
                      "querySettings": {
                          "maxResultRecords": 1000,
                          "defaultScanLimitGbytes": 500,
                          "maxResultMegaBytes": 100,
                          "defaultSamplingRatio": 10,
                          "enableSampling": false
                      }
                  }
              },
              "layouts": {
                  "0": {
                      "x": 0,
                      "y": 0,
                      "w": 4,
                      "h": 2
                  },
                  "1": {
                      "x": 5,
                      "y": 0,
                      "w": 4,
                      "h": 2
                  },
                  "2": {
                      "x": 10,
                      "y": 0,
                      "w": 4,
                      "h": 2
                  },
                  "3": {
                      "x": 15,
                      "y": 0,
                      "w": 4,
                      "h": 2
                  },
                  "4": {
                      "x": 20,
                      "y": 0,
                      "w": 4,
                      "h": 2
                  },
                  "6": {
                      "x": 0,
                      "y": 2,
                      "w": 2,
                      "h": 2
                  },
                  "11": {
                      "x": 0,
                      "y": 17,
                      "w": 4,
                      "h": 5
                  },
                  "13": {
                      "x": 0,
                      "y": 6,
                      "w": 4,
                      "h": 1
                  },
                  "14": {
                      "x": 0,
                      "y": 9,
                      "w": 4,
                      "h": 5
                  },
                  "15": {
                      "x": 0,
                      "y": 15,
                      "w": 4,
                      "h": 2
                  },
                  "16": {
                      "x": 0,
                      "y": 7,
                      "w": 4,
                      "h": 2
                  },
                  "17": {
                      "x": 5,
                      "y": 7,
                      "w": 4,
                      "h": 2
                  },
                  "18": {
                      "x": 2,
                      "y": 2,
                      "w": 2,
                      "h": 2
                  },
                  "22": {
                      "x": 5,
                      "y": 9,
                      "w": 4,
                      "h": 5
                  },
                  "23": {
                      "x": 5,
                      "y": 15,
                      "w": 4,
                      "h": 2
                  },
                  "24": {
                      "x": 5,
                      "y": 17,
                      "w": 4,
                      "h": 5
                  },
                  "25": {
                      "x": 0,
                      "y": 4,
                      "w": 2,
                      "h": 2
                  },
                  "26": {
                      "x": 2,
                      "y": 4,
                      "w": 2,
                      "h": 2
                  },
                  "28": {
                      "x": 7,
                      "y": 4,
                      "w": 2,
                      "h": 2
                  },
                  "31": {
                      "x": 12,
                      "y": 4,
                      "w": 2,
                      "h": 2
                  },
                  "32": {
                      "x": 17,
                      "y": 4,
                      "w": 2,
                      "h": 2
                  },
                  "33": {
                      "x": 10,
                      "y": 9,
                      "w": 4,
                      "h": 5
                  },
                  "34": {
                      "x": 10,
                      "y": 7,
                      "w": 4,
                      "h": 2
                  },
                  "35": {
                      "x": 15,
                      "y": 7,
                      "w": 4,
                      "h": 2
                  },
                  "36": {
                      "x": 15,
                      "y": 15,
                      "w": 4,
                      "h": 2
                  },
                  "37": {
                      "x": 15,
                      "y": 9,
                      "w": 4,
                      "h": 5
                  },
                  "39": {
                      "x": 10,
                      "y": 15,
                      "w": 4,
                      "h": 2
                  },
                  "40": {
                      "x": 20,
                      "y": 7,
                      "w": 4,
                      "h": 2
                  },
                  "41": {
                      "x": 20,
                      "y": 9,
                      "w": 4,
                      "h": 5
                  },
                  "42": {
                      "x": 20,
                      "y": 15,
                      "w": 4,
                      "h": 2
                  },
                  "45": {
                      "x": 22,
                      "y": 4,
                      "w": 2,
                      "h": 2
                  },
                  "49": {
                      "x": 10,
                      "y": 17,
                      "w": 4,
                      "h": 5
                  },
                  "51": {
                      "x": 0,
                      "y": 14,
                      "w": 24,
                      "h": 1
                  },
                  "53": {
                      "x": 10,
                      "y": 6,
                      "w": 4,
                      "h": 1
                  },
                  "54": {
                      "x": 15,
                      "y": 6,
                      "w": 4,
                      "h": 1
                  },
                  "55": {
                      "x": 20,
                      "y": 6,
                      "w": 4,
                      "h": 1
                  },
                  "56": {
                      "x": 5,
                      "y": 6,
                      "w": 4,
                      "h": 1
                  },
                  "66": {
                      "x": 5,
                      "y": 2,
                      "w": 2,
                      "h": 2
                  },
                  "67": {
                      "x": 10,
                      "y": 2,
                      "w": 2,
                      "h": 2
                  },
                  "68": {
                      "x": 15,
                      "y": 2,
                      "w": 2,
                      "h": 2
                  },
                  "69": {
                      "x": 20,
                      "y": 2,
                      "w": 2,
                      "h": 2
                  },
                  "70": {
                      "x": 7,
                      "y": 2,
                      "w": 2,
                      "h": 2
                  },
                  "71": {
                      "x": 12,
                      "y": 2,
                      "w": 2,
                      "h": 2
                  },
                  "72": {
                      "x": 17,
                      "y": 2,
                      "w": 2,
                      "h": 2
                  },
                  "73": {
                      "x": 22,
                      "y": 2,
                      "w": 2,
                      "h": 2
                  },
                  "74": {
                      "x": 5,
                      "y": 4,
                      "w": 2,
                      "h": 2
                  },
                  "75": {
                      "x": 10,
                      "y": 4,
                      "w": 2,
                      "h": 2
                  },
                  "76": {
                      "x": 15,
                      "y": 4,
                      "w": 2,
                      "h": 2
                  },
                  "77": {
                      "x": 20,
                      "y": 4,
                      "w": 2,
                      "h": 2
                  },
                  "78": {
                      "x": 20,
                      "y": 17,
                      "w": 4,
                      "h": 5
                  },
                  "79": {
                      "x": 15,
                      "y": 17,
                      "w": 4,
                      "h": 5
                  }
              },
              "importedWithCode": false,
              "settings": {
                  "defaultTimeframe": {
                      "value": {
                          "from": "now()-24h",
                          "to": "now()"
                      },
                      "enabled": true
                  }
              }  
          }



            // If the "config" step says to install the example, and the dashboard doesn't already exist
            // then carry on and create it.
            if(dashboardCheck == false && dashboardExample == true){

              // Creation of the dashboard as a "document"
              const data = await documentsClient.createDocument({
                body: { name: flowName, 
                        type: "dashboard", 
                        content: new Blob([JSON.stringify(dashboardJson)], {type: "application/json"}),
                        externalId: EXTERNAL_ID}
              });
              
              console.log(data);

            }

            // Logic for handling if the "config" is set not to create it.
            else if(dashboardExample == false) {
              console.log("Config is set not to insert example dashboard.");        
            }
              
            // Logic for handling if the dashboard already exists.
            else if(dashboardCheck == true) {
              console.log("Dashboard already exists, skipping.");
            }

            // Logic for handling anything else.
            else {
              console.log("Not doing it for some unknown reason.");
            }
              
            return;
          }
      position:
        x: -2
        y: 4
      predecessors:
        - create_bizflow
      conditions:
        states:
          create_bizflow: ANY
  description: ""
  trigger:
    schedule:
      rule: null
      trigger:
        type: interval
        intervalMinutes: 5
      timezone: Europe/London
      isActive: false
      isFaulty: false
      nextExecution: null
      filterParameters:
        earliestStart: 2025-07-24
        earliestStartTime: 11:51
      inputs: {}
  schemaVersion: 3
  result: null
  input: {}
  hourlyExecutionLimit: 1000
  type: STANDARD
